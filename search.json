[

{
"id": "-standards-MISRA-C-2023",
"title": "MISRA C - Guidelines for the use of the C language in critical systems",
"author": null,
"tags": [],
"url": "/standards/misra-c",
"date": "2025-07-03",
"content": "MISRA C is a set of software development guidelines for the C programming language.It aims to facilitate code safety, security, portability and reliability in the context of embedded systems, specifically those systems programmed in ISO C / C99 / C11.Quality Attributes Required or EmphasizedThe guidelines are designed to enforce a safer subset of the C language, which directly impacts several quality attributes:            Attribute      Relevance in MISRA C                  Safety      The primary goal. The rules are designed to prevent undefined behavior and common programming errors that can lead to safety hazards.              Reliability      Enforced by rules that reduce the likelihood of defects and unexpected behavior.              Maintainability      Promoted through rules that improve code clarity, consistency, and comprehensibility.              Portability      Addressed by rules that avoid implementation-defined behavior, making the code more portable across different compilers and platforms.              Security      Many rules that enhance safety also contribute to security by preventing vulnerabilities such as buffer overflows and data corruption.      Note: Compliance with MISRA C is often a requirement in safety-critical industries such as automotive, aerospace, and medical devices.ReferencesOfficial Standards Documents  The MISRA C guidelines are published by the Motor Industry Software Reliability Association (MISRA).Related Standards  ISO/IEC 9899 - The C programming language standard.Additional Resources  t.b.d"
}, 

{
"id": "-standards-ISO-27001",
"title": "ISO/IEC 27001 - Information security management",
"author": null,
"tags": [],
"url": "/standards/iso-27001",
"date": "2025-07-03",
"content": "ISO/IEC 27001 is an international standard titled:“Information technology — Security techniques — Information security management systems — Requirements”It specifies the requirements for establishing, implementing, maintaining, and continually improving an Information Security Management System (ISMS).Quality Attributes Required or EmphasizedThe standard is centered around information security and risk management. The primary quality attributes are:            Attribute      Relevance in ISO/IEC 27001                  Confidentiality      Ensuring that information is accessible only to authorized individuals or systems.              Integrity      Maintaining the accuracy and completeness of information and preventing unauthorized modification.              Availability      Ensuring that authorized users have timely and reliable access to information when needed.              Reliability      Addressed through requirements for business continuity, system and network security, and operational procedures.              Maintainability      Supported by requirements for documentation, change management, and clear allocation of responsibilities.              Compliance      A key driver for implementing the standard is to ensure legal, statutory, regulatory, and contractual requirements are met.      Note: ISO/IEC 27001 provides a framework for managing information security risks. The specific controls are listed in Annex A and are further detailed in ISO/IEC 27002.ReferencesOfficial Standards Documents  t.b.dRelated Standards  ISO/IEC 27002 - Code of practice for information security controls  ISO/IEC 27005 - Information security risk managementAdditional Resources  t.b.d"
}, 

{
"id": "-standards-ISO-26262",
"title": "ISO 26262 - Road vehicles — Functional safety",
"author": null,
"tags": [],
"url": "/standards/iso-26262",
"date": "2025-07-03",
"content": "ISO 26262 is an international standard titled:“Road vehicles — Functional safety”It is an international standard for functional safety of electrical and/or electronic systems in production automobiles.Quality Attributes Required or EmphasizedThe standard is centered around functional safety, aiming to mitigate risks associated with system malfunctions.            Attribute      Relevance in ISO 26262                  Safety      The core focus. The standard defines a safety lifecycle and Automotive Safety Integrity Levels (ASILs) to classify risk.              Reliability      Crucial for safety. It requires systematic analysis of failure modes, rates, and effects (e.g., FMEA).              Fault Tolerance      Addressed through requirements for hardware and software architectural design, including redundancy and diagnostic capabilities.              Testability      Mandates comprehensive verification and validation activities throughout the development process.              Traceability      Required to ensure a clear link between requirements, design, implementation, and tests for safety-critical functions.      Note: ISO 26262 is a comprehensive standard that applies to the entire lifecycle of safety-related automotive systems.ReferencesOfficial Standards Documents  t.b.dRelated Standards  Automotive SPICE (ASPICE)Additional Resources  t.b.d"
}, 

{
"id": "-standards-ISO-25010",
"title": "ISO/IEC 25010 - Systems and Software Quality",
"author": null,
"tags": [],
"url": "/standards/iso-25010",
"date": "2025-07-03",
"content": "ISO/IEC 25010: Systems and software Quality Requirements and Evaluation (SQuaRE)It defines a quality-in-use model and a product quality model. The product quality model is composed of nine characteristics.These characteristics correspond somewhat to our tags:efficient, flexible, operable, reliable, safe, secure, suitable, usable,Product Quality Model Characteristics            Characteristic      Description                  Functional Suitability      The degree to which a product or system provides functions that meet stated and implied needs when used under specified conditions.              Performance Efficiency      The performance relative to the amount of resources used under stated conditions.              Compatibility      The degree to which a product, system or component can exchange information with other products, systems or components, and/or perform its required functions, while sharing the same hardware or software environment.              Interaction Capability      The degree to which a product or system can be operated by specified users to achieve specified goals with effectiveness, efficiency and satisfaction in a specified context of use. (Formerly Usability)              Reliability      The degree to which a system, product or component performs specified functions under specified conditions for a specified period of time.              Security      The degree to which a product or system protects information and data so that persons or other products or systems have the degree of data access appropriate to their types and levels of authorization.              Maintainability      The degree of effectiveness and efficiency with which a product or system can be modified by the intended maintainers.              Flexibility      The degree to which a product or system can be adapted for different or evolving hardware, software or other operational or usage environments. (Formerly Portability)              Safety      The degree to which a product or system avoids harm to people, business, software, property or the environment in a specified context of use.      ReferencesOfficial Standards Documents  ISO/IEC 25010:2023Related Standards  ISO/IEC 25000 series (SQuaRE)Additional Resources  t.b.d"
}, 

{
"id": "-standards-IEC-62304",
"title": "IEC 62304 - Medical device software",
"author": null,
"tags": [],
"url": "/standards/iec-62304",
"date": "2025-07-03",
"content": "IEC 62304: “Medical device software – Software life cycle processes”This international standard defines the requirements for the software development life cycle of medical device software, whether the software is a component of a medical device or a standalone product (also known as Software as a Medical Device, SaMD).Quality Attributes Required or EmphasizedThe standard does not explicitly use the term “quality attributes” in the ISO 25010 sense, but several critical attributes are clearly emphasized through required processes:            Attribute      Relevance in IEC 62304                  Safety      Central concern. Risk management must be integrated throughout the software lifecycle.              Reliability      Required via verification, validation, and robust maintenance processes.              Maintainability      Emphasis on change control, problem resolution, and proper documentation.              Traceability      End-to-end traceability between requirements, implementation, tests, and risk controls.              Usability      Not a core focus, but indirectly relevant for safety and effectiveness.              Security      Not directly addressed in depth (older version), but relevant under risk control.      Note: The latest version of the standard encourages integration with ISO 14971 (Risk Management) and IEC 62366 (Usability Engineering) for comprehensive coverage.ReferencesOfficial Standards Documents  t.b.dRelated Standards  ISO 14971 - Application of risk management to medical devices  IEC 62366 - Medical devices - Application of usability engineering to medical devicesAdditional Resources  t.b.d"
}, 

{
"id": "-requirements-protect-data-by-security-protocols",
"title": "Protect Data by Establishing Security Protocols",
"author": null,
"tags": ["secure", "safe", "reliable"],
"url": "/requirements/protect-data-by-security-procols",
"date": "2025-02-01",
"content": "  Context/Background: We have a medical system containing sensitive patient health-related data.  Source: Establish comprehensive cybersecurity protocols to protect patient data from unauthorized access and cyber threats.  Metric/Acceptance Criteria: Conduct regular security audits and penetration tests, with no critical vulnerabilities found, and ensure compliance with relevant regulations (e.g., HIPAA, GDPR)."
}, 

{
"id": "-requirements-reliable-backup-restore",
"title": "Reliable Backup and Restore",
"author": null,
"tags": ["safe", "reliable"],
"url": "/requirements/reliable-backup-and-restore",
"date": "2025-01-29",
"content": "  Context/Background  An Electronic Health Records (EHR) system needs to ensure accurate and timely documentation of patient information.  Data loss must be avoided.  Metric/Acceptance Criteria  Data recovery should be      achievable within 4 hours of any data loss incident, and    backups should be performed daily without any data corruption  "
}, 

{
"id": "-requirements-reliable-EHR-system",
"title": "Reliable ERH System",
"author": null,
"tags": ["safe"],
"url": "/requirements/reliable-erh-system",
"date": "2025-01-29",
"content": "  Context/Background  An Electronic Health Records (EHR) system needs to ensure accurate and timely documentation of patient information.  Metric/Acceptance Criteria  The EHR system should:      achieve 99.9% uptime, and    patient records should be updated within 5 minutes of any clinical interaction  "
}, 

{
"id": "-requirements-unavailable-for-max-2-minutes",
"title": "Unavailable for max 2 minutes",
"author": null,
"tags": ["reliable", "usable"],
"url": "/requirements/unavailability-max-2-minutes",
"date": "2024-10-11",
"content": "  Context/Background: If an expert system becomes unavailable, the employer has to pay the employees even though they cannot work. This is especially a problem in countries with high labour costs.  Source: User intends to perform any operation within the expert system.  Metric/Acceptance Criteria: The user is never blocked longer than for 2 minutes at any time due to any unavailability of the system."
}, 

{
"id": "-requirements-restore-filter",
"title": "Restore Filter after Log In",
"author": null,
"tags": ["usable", "suitable"],
"url": "/requirements/restore-filter-after-log-in",
"date": "2024-10-11",
"content": "  Context/Background: In a multi-tenant web based system within a factory, each user may need to have their work environment with their settings restored after successful log in.  Source: User logins to start their shift and accesses a website with a table with data.  Metric/Acceptance Criteria: The website displays the table filtered by the filter as it was configured by the logged-in user before their last log off."
}, 

{
"id": "-requirements-parallel-data-modification",
"title": "Parallel Data Modification",
"author": null,
"tags": ["usable", "efficient", "secure"],
"url": "/requirements/parallel-data-modification",
"date": "2024-10-11",
"content": "  Context/Background: In some multi-tenant systems several tenants may modify the same data at the same time. A possible solution is Optimistic Locking.  Source: User A modifies shortly after user B has read the same data record.  Metric/Acceptance Criteria: The system display a conflict message and displays user B the data record of user A so that user B can react to the changes of user A."
}, 

{
"id": "-requirements-display-data-based-on-context",
"title": "Display Data Based on Context",
"author": null,
"tags": ["usable", "suitable"],
"url": "/requirements/display-data-based-on-context",
"date": "2024-10-11",
"content": "  Context/Background: The same workstation of a multi-tenant system within a factory might be used by different employees of different shifts.  Source: User logins to start their shift.  Metric/Acceptance Criteria: The expert system displays the screens that have been opened by the user the last time before they logged off."
}, 

{
"id": "-requirements-access-control-via-sso",
"title": "Access Control via SSO",
"author": null,
"tags": ["usable", "suitable", "secure"],
"url": "/requirements/access-control-via-sso",
"date": "2024-10-11",
"content": "  Context/Background: Employees in companies often have a central username/password pair or certificate used to log in via a Single Sign On (SSO) solution, such that they do not have to maintain different credentials per system. If a new system is added to the company’s portfolio, it should make use of the centralized authentication system.  Source: User authenticates using their SSO credentials on the expert system.  Metric/Acceptance Criteria: System performs transparently the login via SSO in less than 3 seconds. The user has their correct role and rights after login."
}, 

{
"id": "-requirements-recognize-assistive-technologies",
"title": "Recognize Assistive Technologies",
"author": null,
"tags": ["usable"],
"url": "/requirements/recognize-assistive-technology",
"date": "2024-04-20",
"content": "  Requirement:  The software recognizes the use of assistive technologies and adapts its user interface to improve accessibility. This includes at least the following:      providing alt text for images,    ensuring keyboard navigability,    offering voice navigation, and    maintaining high contrast for users with visual impairments.    Metrics:      Screen Reader Efficiency: 95% of the content must be accurately read out by screen readers without user confusion over navigation or actions.    Keyboard Navigability: All interactive elements must be accessible with a keyboard alone, and users should be able to complete all forms and transactions using keyboard shortcuts, aiming for task completion within 120% of the time taken using a mouse.    Contrast Ratio: The website must maintain a minimum contrast ratio of 7:1 for normal text and 4.5:1 for large text.    Error Rate: The error rate for users utilizing assistive technologies should not exceed 5% higher than for users not using these technologies, ensuring comparable ease of use.  This requirement has been crafted with help from ChatGPT 4.0."
}, 

{
"id": "-requirements-multilinguality-support",
"title": "Multilinguality Support",
"author": null,
"tags": ["usable"],
"url": "/requirements/multilinguality-support",
"date": "2024-04-20",
"content": "  Requirement:  The system should support multiple languages to cater to a diverse user base.  Metrics:      Language Options: Provide support for at least 10 widely-used languages, with plans to expand based on user demand.    Localization Accuracy: Maintain a translation accuracy rate of over 95%, as verified by native speakers.  "
}, 

{
"id": "-requirements-inclusive-user-testing",
"title": "Inclusive User Testing",
"author": null,
"tags": ["usable"],
"url": "/requirements/inclusive-user-testing",
"date": "2024-04-20",
"content": "  Requirement:  Conduct user testing with diverse groups to ensure the software meets various needs.  Metrics:      Diverse Test Group Representation: Include participants from at least 5 different demographic groups in user testing sessions.    Usability Scores: Achieve an average usability score of 85/100 across all demographic groups.  "
}, 

{
"id": "-requirements-cultural-sensitivity-in-content",
"title": "Cultural Sensitivity in Content",
"author": null,
"tags": ["usable"],
"url": "/requirements/cultural-sensitivity-in-content",
"date": "2024-04-20",
"content": "  Requirement:  All content within the system must be culturally sensitive and inclusive.  Metrics:      Content Review: Implement a review process where 100% of content is vetted for cultural sensitivity by subject matter experts.    User Feedback: Collect and aim for less than 0.1% negative feedback related to cultural insensitivity.  "
}, 

{
"id": "-requirements-accessible-ui",
"title": "Accessible User Interface",
"author": null,
"tags": ["usable"],
"url": "/requirements/accessible-user-interface",
"date": "2024-04-20",
"content": "  Requirement: The software UI must be accessible to users with various disabilities.  Metrics:  Context/Background  Software UI must be accessible to users with various disabilities.System aims to comply with WCAG 2.1 AA and be compatible with leading screen readers.  Source  Development team implementing and maintaining the software UI with accessibility focus.  Metric/Acceptance Criteria      Achieve and maintain WCAG 2.1 AA compliance for all user interfaces              100% pass rate on automated WCAG 2.1 AA tests              Ensure 100% compatibility with leading screen readers (e.g., JAWS, NVDA, VoiceOver)              All UI elements properly labeled and described        Full keyboard navigation possible        Dynamic content changes appropriately announced            "
}, 

{
"id": "-requirements-local-explainability",
"title": "Local Explainability",
"author": null,
"tags": ["suitable", "safe", "reliable"],
"url": "/requirements/local-explainability",
"date": "2024-01-14",
"content": "  Stimulus: The user was subject of a decision of the system.  Environment: The user has submitted a request and the system used Artificial Intelligence (AI) to decide if the request should be approved or not. The user is then informed of the decision.  Response: The user is informed about the 3 features that were most influential in the final decision.  Background: Using AI to generate decisions involves finding patterns in large sets of data. Individual results are subject to statistical noise and may be erroneous. Specifically for systems in high risk scenarios, giving users an explanation is necessary to allow additional oversight and appeal processes."
}, 

{
"id": "-requirements-global-explainability",
"title": "Global Explainability",
"author": null,
"tags": ["suitable", "safe", "reliable"],
"url": "/requirements/global-explainability",
"date": "2024-01-14",
"content": "  Environment: The system uses Artificial Intelligence (AI) to make decisions related to humans using their request data and large amounts of statistical data of the domain.  Response: An administrator can request the average impact of specific features.  Background: Using AI to generate decisions involves finding patterns in large sets of data. Some of these patterns are a result of biases in the data or represent information or characteristics (like sexual orientation or religious beliefs) that most modern legal frameworks explicitly forbid from being used in analyses and decision making."
}, 

{
"id": "-requirements-precise-vehicle-orientation-gps",
"title": "Precision of vehicle's orientation",
"author": null,
"tags": ["reliable"],
"url": "/requirements/precise-vehicle-orientation-gps",
"date": "2023-12-05",
"content": "  Scenario: The orientation of the vehicle  Stimulus: is measured twice for the same orientation.  Reaction: The orientation is displayed in the gps software.  Metric: The orientation precision is better than ± 3°"
}, 

{
"id": "-requirements-learnability-find-article",
"title": "New users learn to find articles on their own",
"author": null,
"tags": ["usable"],
"url": "/requirements/learnability-find-article",
"date": "2023-12-05",
"content": "  Scenario: A user who has never used the system before, but other IT systems in general  Stimulus: has to find a specific article.  Reaction: The system’s search page displays the article as a search result if asked for it.  Metric: 95% of the users find the search page and then the article in less than two minutes.  Background: The navigation and search page must be built in a way that users who use other IT-systems learn the usage of the given system without having to read a manual or the need to ask someone."
}, 

{
"id": "-requirements-minimize-jitter-in-data-streaming",
"title": "Minimize jitter in real-time data streaming",
"author": null,
"tags": ["reliable"],
"url": "/requirements/minimize-jitter",
"date": "2023-12-05",
"content": "  Overall goal: Reduce and control jitter in the real-time streaming of data.  Stimulus: Continuous transmission of real-time data (from sensors) over a network,.  Environment: Operational phase under standard network conditions.  Response: The system handles variations in delay of data packet delivery.  Response Measure:      The variance in delay between data packets (jitter) should not exceed 5 milliseconds for 95% of the transmitted packets    In instances where jitter exceeds this threshold, the system should employ buffering mechanisms to smooth the data flow, ensuring that the effective jitter experienced by the end-user remains below 7 milliseconds    The system must detect and log instances of high jitter (above 5 milliseconds) in real-time, triggering alerts for the technical team when such instances exceed 5% of the total packets in any 10-minute window    During peak load times, the allowable jitter can increase to a maximum of 10 milliseconds, but such instances should not exceed 2% of the total packets transmitted in a 24-hour period.  "
}, 

{
"id": "-requirements-installability-new-feature",
"title": "Rollout of a new feature",
"author": null,
"tags": ["operable", "suitable"],
"url": "/requirements/rollout-new-feature",
"date": "2023-12-05",
"content": "  Stimulus: The product team provides a new feature.  Reaction: The system updates itself in a way that the new feature can be used.  Metric: There is no action required from the user to be able to use the new feature, i.e. the new feature just becomes available.  Background: If software is provided via an install kit, it may need to be provided for different operating systems and users will have to run an update installer to access new features. In contrast, web-based systems retrieve their logic over the network, so no action from the user site is needed. Since a requirement, like the one above, is not dictating a solution, but what needs to be fulfilled other solutions than a web-based system that avoids installation were also valid."
}, 

{
"id": "-requirements-efficient-save-function",
"title": "Efficient save function",
"author": null,
"tags": ["efficient"],
"url": "/requirements/efficient-save-function",
"date": "2023-12-05",
"content": "  Stimulus: A user uses the web interface to add article to the shopping cart.  Reaction: The system displays a confirmation, i.e. an article counter above the shopping cart icon is incremented, once the article has been added reliably to the cart.  Metric: The time between hitting the add article button and the displayed confirmation is less than 1 second in 99% of the tests."
}, 

{
"id": "-requirements-accurate-vehicle-position-gps",
"title": "Vehicle's position validity influences accuracy",
"author": null,
"tags": ["reliable", "usable"],
"url": "/requirements/accurate-vehicle-position-gps",
"date": "2023-12-05",
"content": "  Scenario: The vehicle’s position on the map of the navigation system  Stimulus: is updated.  Reaction: The current position of the vehicle is determined by extrapolation and not GPS data.  Metric: The extrapolated position is recalculated with a frequency greater than 10Hz.  Background: The GPS position retrieval rate via satellite might be insufficient low, such that in-between positions are determined using extrapolation.  Context/Background  The system is a vehicle navigation system that displays the vehicle’s position on a map.GPS data might be retrieved at an insufficient rate for smooth position updates.To compensate for this, the system uses extrapolation to determine in-between positions.This extrapolation is crucial for providing a smooth and accurate representation of the vehicle’s movement on the map.  Source  The vehicle’s position on the map of the navigation system is being updated.The current position is determined by extrapolation rather than direct GPS data.  Metric/Acceptance Criteria  The extrapolated position of the vehicle must be recalculated with a frequency greater than 10Hz.  This requirement will be considered met when:      The system consistently maintains a position update rate higher than 10 times per second    This update rate is maintained under various driving conditions (e.g., different speeds, urban vs. rural environments)    The transition between extrapolated positions and new GPS data is smooth, with no visible jumps on the map  "
}, 

{
"id": "-requirements-convenient-online-banking",
"title": "Convenient online banking",
"author": null,
"tags": ["usable", "suitable"],
"url": "/requirements/convenient-online-banking",
"date": "2023-09-06",
"content": "  Background      Product Description: A browser-based online banking application.    Intended User Base: Banking customers who manage their accounts primarily online.    Features include account balance viewing, funds transfer, bill payments, account statements, and customer support access.    Event:  A user wants to make a bill payment to a new payee, which involves adding the payee’s details (like account number, e.g. European IBAN), setting up the payment amount, and confirming the transaction via any second-factor authentication.  Reaction:      Task Streamlining: The application should guide the user through a simplified process of adding a new payee and completing the payment.    User Interface Optimization: The interface should be intuitive, minimizing the need for user input and reducing the likelihood of errors.    Transaction Efficiency and Convenience: The process should be quicker and more convenient compared to traditional methods (e.g., branch visits, phone calls).    Metrics:      Step Reduction: The number of user interactions (clicks and data entries) required to add a new payee and complete a payment shall be below 6 keyboard interactions.    Completion Time: The average time taken by users to complete the bill payment process from login to confirmation should require less than 2 minutes.    Error Rate: Percentage of transactions that result in errors or user-initiated corrections needs to be lower than 2%.      "
}, 

{
"id": "-requirements-compliance-to-wcag-standard",
"title": "Compliance with WCA accessibility guidelines",
"author": null,
"tags": ["usable"],
"url": "/requirements/compliance-to-wcag",
"date": "2023-09-06",
"content": "  Source  A person with a visual impairment using a screen reader.  Stimulus  The user wants to navigate and interact with a web application.  Artifact  Web application  Environment  The user accesses the web application in a standard web browser, using the latest version of a popular screen reader.  Response Measure  Navigation: At least 95% of all interactive elements (e.g., links, buttons, form fields) should be navigable and identifiable using the screen reader.  Content: At least 98% of all content, including text, images (with alt attributes), videos (with captions), etc., should be accessible and consumable using the screen reader.  Interactivity: Users should be able to interact with 95% of web application’s functionality, such as submitting forms, without encountering any accessibility barriers.  Feedback: All messages, errors, and notifications should be clearly announced to the screen reader with 99% accuracy.  Load time: Despite any accessibility enhancements, page load times should not exceed 3 seconds for 90% of page loads, ensuring that the accessibility features don’t negatively impact performance.  Compliance: The application should meet WCAG 2.1 Level AA standard criteria. Automated testing tools should report zero non-compliance issues, and manual testing should identify no more than 2 issues per page.Source: This scenario has been created with help from ChatGPT by using the prompt Please generate a quality attribute scenario for accessibility compliance with WCAG 2.1 with precise metrics."
}, 

{
"id": "-requirements-low-change-failure-rate",
"title": "Low change-failure rate",
"author": null,
"tags": ["reliable"],
"url": "/requirements/low-change-failure-rate",
"date": "2023-09-04",
"content": "  Stimulus  A software development team deploys a new version of a web application to a production environment.  Response  The change failure rate requirement will be considered met when the following precise metrics are achieved over a three-month period:  Successful Deployments: The percentage of successful deployments, where all changes are rolled out without causing production incidents, should be at least 98%.  Severe Incidents: The number of severe incidents directly caused by deployments (e.g., application crashes, data loss) should not exceed 1 per month on average.  Minor Incidents: The number of minor incidents (e.g., non-critical bugs, minor performance issues) directly caused by deployments should not exceed 2 per month on average.  Rollback Rate: The rate of rollbacks due to deployment issues should not exceed 2% of all deployments.  Incident Resolution Time: The average time to resolve deployment-related incidents should not exceed 4 hours for severe incidents and 2 hours for minor incidents.  Customer Complaints: The number of customer complaints related to degraded service or issues caused by deployments should not exceed 1 per month on average.Source: This scenario has been created with help from ChatGPT by using the prompt create a quality scenario to describe a change-failure-rate requirement."
}, 

{
"id": "-requirements-budget-constrained-library-update",
"title": "Budget constrained library update",
"author": null,
"tags": ["efficient", "suitable"],
"url": "/requirements/budget-constraint-library-update",
"date": "2023-09-04",
"content": "  Context/Background      The system uses a commercial library as a core component.    An automated build and test pipeline for the system is in place.This is available for all developers within their development environment.    Source      This commercial library gets regular security updates every month.    In some cases (e.g. zero day exploits) additional updates are delivered from the vendor. The product owner requires that these updates are incorporated with  only limited manual effort.    Metric/Acceptance Criteria      An update of this library must be possible with a maximum time budget of less than 2 developer-hours on average.    The cost of automation (build and test) is not considered, as these are already available.  "
}, 

{
"id": "-requirements-assess-impact-of-proposed-change",
"title": "Assess impact of proposed change",
"author": null,
"tags": ["suitable", "reliable"],
"url": "/requirements/assess-impact-of-proposed-change",
"date": "2023-09-04",
"content": "  Context/Background  The system is a financial software application with multiple modules.A software development team needs to analyze and assess the impact of a proposed change to a specific module.The system’s analysability is crucial for efficient change management and maintenance.Tools and practices are in place to support code documentation, dependency mapping, and change simulation.  Source  A software development team initiates an impact analysis for a proposed change to a specific module of the financial software application.  Metric/Acceptance Criteria  The system’s analysability requirement will be considered met when the following precise metrics are achieved:      Change Impact Assessment Time:              The team must be able to assess the impact of the proposed change within 2 hours        This time starts from the moment the team begins reviewing relevant documentation and source code        The assessment should cover all potential areas affected by the change              Code Comment Density:              The affected module must have a minimum code comment density of 20%        This density should be measured using automated code analysis tools        Comments should be meaningful and provide clear explanations of code functionality              Dependency Mapping:              The system must provide a visual dependency map of the module, that indicates all dependencies on and from other components        Generation time for the dependency map must not exceed 5 minutes        The map should be accurate, showing 100% of actual dependencies              Overall Compliance:              All three criteria (assessment time, comment density, and dependency mapping) must be met for the requirement to be satisfied        Compliance should be verified through at least 3 different change scenarios        Any failures in meeting these criteria should be documented and addressed        The system should maintain this level of analysability for at least 90% of all modules            Source: This scenario has been created with help from ChatGPT by using the prompt create a quality scenario to describe an analysability requirement."
}, 

{
"id": "-requirements-appearance-requirements",
"title": "Appearance of mobile UI",
"author": null,
"tags": ["usable"],
"url": "/requirements/appearance-requirements",
"date": "2023-09-04",
"content": "  Context/Background  The system is a mobile application with a user interface (UI) for performing common tasks such as creating an account or making a purchase.The appearance of the UI is critical for user experience and brand consistency.The application needs to maintain visual consistency, color scheme compliance, text legibility, proper image resolution, responsive design, and acceptable loading times across various devices and screen sizes.The UI should adhere to accessibility standards such as WCAG 2.0.  Source  A user interacts with a mobile application’s user interface (UI) to perform a common task, such as creating an account or making a purchase.  Metric/Acceptance Criteria  The appearance requirement will be considered met when the following precise metrics are achieved:      Visual Consistency:              At least 95% of UI elements must adhere to the established style guide        This adherence should be visually assessed and documented              Color Scheme Compliance:              No more than 5% deviation from the specified color codes is allowed        Compliance should be verified using automated color analysis tools              Text Legibility:              100% of text elements must meet WCAG 2.0 accessibility guidelines        Font size, contrast ratios, and line spacing should be compliant        Automated accessibility testing tools should confirm this compliance              Image Resolution:              100% of images and icons must be rendered without distortion or pixelation        Automated testing should verify correct resolution and aspect ratio              Responsive Design:              UI layout must remain visually appealing and functional on at least 95% of tested devices        Testing should cover multiple devices and screen sizes        No critical layout issues should be observed in these tests              Loading Times:              No individual UI element should exceed a 3-second loading time        Automated performance testing should validate this requirement        Specific loading time targets should be defined for each major UI element (e.g., main screen, product images)              Overall Compliance:              The application must pass all the above criteria in at least 3 consecutive testing cycles        Any failures must be documented, addressed, and re-tested until compliance is achieved            Source: This scenario has been created with help from ChatGPT by using the prompt create a quality scenario to describe an appearance requirement."
}, 

{
"id": "-requirements-affordable-crm",
"title": "Affordable CRM (customer relationship management)",
"author": null,
"tags": ["efficient", "suitable"],
"url": "/requirements/affordable-crm",
"date": "2023-09-04",
"content": "  Context/Background  A mid-sized company is planning to adopt a new Customer Relationship Management (CRM) software system.The company has allocated a limited budget for the software, covering initial purchase, setup, training, and first-year operational costs.The total cost of ownership (TCO) for the first year is a critical factor in the decision-making process.The company needs to ensure that the chosen CRM solution fits within their budgetary constraints while meeting their operational needs.  Source  Finance department of a mid-sized company wishes to adopt a new Customer Relationship Management (CRM) software system.  Metric/Acceptance Criteria  The total cost of ownership (TCO) for the first year of the CRM software must not exceed the set budget of $24,000.This TCO is broken down into the following specific cost categories:      Initial licensing cost must be less than or equal to $10,000    Setup and deployment costs must not exceed $5,000    Training costs for 50 employees must be kept at or below $3,000    Maintenance and support costs for the first year must be less than or equal to $2,000    Operational costs, including cloud hosting, for one year must not surpass $4,000    The sum of all these costs (Total First-Year TCO) must be less than or equal to $24,000    All costs must be verifiable through official quotes, invoices, or contracts    Any potential hidden costs or fees must be identified and included in the TCO calculation    The chosen CRM solution must meet at least 90% of the company’s functional requirements within this budget    The TCO calculation must be completed and verified at least 30 days before the final decision on CRM adoption  Source: This scenario has been created with help from ChatGPT by using the prompt create a quality scenario to describe an affordability requirement."
}, 

{
"id": "-requirements-withstand-ddos-attack",
"title": "Withstand DDoS Attack",
"author": null,
"tags": ["reliable"],
"url": "/requirements/withstand-ddos-attack",
"date": "2023-09-03",
"content": "  Stimulus: A distributed denial of service (DDoS) attack targeting the web application.Environment: The web application is hosted on a cloud-based infrastructure with multiple server instances distributed across different regions.Response: The web application should effectively withstand and mitigate the DDoS attack, ensuring service availability and acceptable performance levels. Precise metrics to determine when the requirement is met include:            Availability: The web application should maintain at least 99.9% uptime during the DDoS attack, measured over a 24-hour period. Uptime is defined as the percentage of time the application remains accessible and responsive to legitimate user requests.              Response Time: The application should maintain a maximum response time of 500 milliseconds for 95% of legitimate user requests during the DDoS attack. Response time is measured as the time taken to respond to a request from the moment it’s received.              Traffic Handling: The application should be capable of handling a sustained traffic load of 10 times its typical peak traffic during the attack without service degradation. This is measured by monitoring the incoming request rate and system resource utilization.              Security: The application should effectively identify and block malicious traffic sources during the DDoS attack, with a false positive rate of no more than 1%. False positives refer to legitimate users or traffic mistakenly identified as malicious and blocked.              Failover and Recovery: In the event of server or infrastructure failures caused by the DDoS attack, the application should automatically failover to healthy resources within 2 minutes, minimizing downtime.              Data Integrity: Throughout the attack, the application should ensure data integrity and prevent data corruption, with zero data loss or inconsistencies.              Logs and Reporting: The application should log and report DDoS attack incidents, including the attack vectors, traffic patterns, and response actions, for further analysis and improvement.        By meeting these precise metrics, the web application demonstrates its resilience by maintaining service availability, acceptable performance, and security even in the face of a DDoS attack. These metrics help ensure that the application not only survives the attack but also continues to provide a satisfactory user experience and maintains data integrity.This requirement was created with help from ChatGPT by using the prompt create a quality attribute scenario to describe a resilience requirement for a web application."
}, 

{
"id": "-requirements-sudden-increase-in-traffic",
"title": "Handle sudden increase in traffic",
"author": null,
"tags": ["reliable"],
"url": "/requirements/handle-sudden-increase-in-traffic",
"date": "2023-09-03",
"content": "  Stimulus: A sudden increase in traffic due to unexpected popularity or a temporary spike in user activity.  Environment: The web application is running in a cloud-based environment with multiple servers and data centers.  Response: The web application should gracefully handle the traffic surge without service disruption.Performance degradation shall remain below 25% reduced response time.  It should automatically scale its resources to accommodate the increased load, distribute traffic evenly among servers, and ensure data consistency. In the event of server failures, it should seamlessly redirect traffic to healthy servers and recover lost data if necessary. Additionally, it should log and report any anomalies or failures for further analysis and improvement.This requirement was created with help from ChatGPT by using the prompt create a quality attribute scenario to describe a resilience requirement for a web application."
}, 

{
"id": "-requirements-scale-up-in-2-minutes",
"title": "Scale up in 2 Minutes",
"author": null,
"tags": ["efficient", "reliable"],
"url": "/requirements/scale-up-in-2-minutes",
"date": "2023-09-03",
"content": "  Background: A cloud-based web application, with a sudden increase in user traffic, such as during a promotional event or a major product launch. Auto-scaling features are available and configured.  Response: The system automatically detects the increase in load and provisions additional resources to handle the increased traffic, without human intervention.  Metric:      Time to Scale: The system should begin scaling up additional resources within 2 minutes of detecting a 50% increase in traffic load.    Resource Utilization: After scaling, CPU and memory utilization should stabilize at approximately 70%, ensuring that resources are neither underutilized (wasteful) nor overburdened (which could degrade performance).    Performance Maintenance: The response time of the web application should not exceed 3 seconds for 95% of the requests, even during peak traffic.Cost Efficiency: The cost of scaled resources should not exceed a 150% increase despite a 200% increase in traffic, emphasizing cost-effective scaling.  This requirement was created with help from ChatGPT by using the prompt create a quality attribute scenario to describe a elasticity requirement for a web application."
}, 

{
"id": "-requirements-reduce-energy-consumption",
"title": "Reduce energy consumption with every new version",
"author": null,
"tags": ["efficient"],
"url": "/requirements/reduce-energy-consumption-with-new-version",
"date": "2023-07-23",
"content": "  Stimulus: The software system is in operation, serving a high number of concurrent users in a data center powered by non-renewable energy sources.  Environment: High demand for data processing and computational resources, typical of a large-scale application.  Response: The system should prioritize energy efficiency and carbon reduction in its operations. It should be designed to:      optimize energy consumption, aiming to reduce overall energy usage by 25% compared to the previous year’s energy consumption.    incorporate renewable energy sources for its data center operations, striving to achieve at least 50% of renewable energy usage within the next two years.    achieve at least 50% of renewable energy usage within the next two years. This goal promotes a gradual shift towards more sustainable energy practices.  Source: This scenario has been created with help from ChatGPT by using the prompt create a quality scenario to describe a carbon-efficiency requirement."
}, 

{
"id": "-requirements-access-control-is-enforced",
"title": "Access control is enforced",
"author": null,
"tags": ["secure", "suitable"],
"url": "/requirements/access-control-is-enforced",
"date": "2023-07-23",
"content": "  Context/Background  The system operates in a multi-user environment with varying levels of user roles and permissions.      Sensitive features and confidential information are present within the system.    Access control is crucial to maintain data security and privacy.    The system employs role-based access control (RBAC) to manage user permissions.    An audit trail is maintained for all access attempts to sensitive data.    Source  A user attempts to access a sensitive feature or confidential information within the system.  Metric/Acceptance Criteria  The system must enforce appropriate access controls based on the user’s role and permissions.  The access control mechanism must meet the following criteria:      100% of access attempts must be authenticated before granting access to any sensitive data    Multi-factor authentication (MFA) or biometric authentication is implemented for accessing highly sensitive data    User roles are precisely defined (e.g., “Customer Service Representative,” “Financial Analyst,” “Administrator”)    Access permissions are assigned based on the principle of least privilege    Sensitive data is classified into at least three levels (e.g., public, internal, confidential)    Access controls are configured according to data classification, with stricter controls for highly sensitive data    100% of access attempts (successful and failed) to sensitive data are logged in a tamper-proof audit trail    Audit logs include user identity, timestamp, accessed data, and outcome (granted or denied)    Authorized personnel can revoke access permissions immediately, with changes taking effect within 60 seconds    User sessions automatically timeout after a maximum of 30 minutes of inactivity    Access denials display a relevant and user-friendly error message within 2 seconds    100% of access control violations are logged and reported to authorized personnel within 5 minutes    The system maintains 99.99% uptime for the access control service    Access control policy updates are applied system-wide within 5 minutes of being implemented  Source: This scenario has been created with help from ChatGPT by using the prompt create a quality scenario to describe an access control requirement."
}, 

{
"id": "-requirements-carbon-efficiency-save-20-percent",
"title": "Save at least 20% of carbon emissions with every new version",
"author": null,
"tags": ["efficient"],
"url": "/requirements/carbon-efficiency-save",
"date": "2023-07-04",
"content": "  Stimulus: The system processes a high volume of data and performs resource-intensive computations.  Environment: Data center powered by non-renewable energy sources.  Response: The system should minimize its carbon footprint by optimizing energy usage and resource allocation, aiming to reduce energy consumption by at least 20% compared to previous versions.Source: This scenario has been created with help from ChatGPT by using the prompt create a quality scenario to describe a carbon-efficiency requirement."
}, 

{
"id": "-requirements-authenticity-of-digital-document",
"title": "Authenticity of a digital document",
"author": null,
"tags": ["secure", "suitable"],
"url": "/requirements/authenticity-of-digital-document",
"date": "2023-07-03",
"content": "  Context/Background  The system operates in an environment where document integrity and trustworthiness are critical.It provides functionality for users to verify the authenticity of digital documents.The system employs a robust digital signature mechanism to ensure document authenticity and integrity.A secure and tamper-proof audit trail is maintained for all document-related activities.  Source  A user attempts to verify the authenticity of a digital document.  Metric/Acceptance Criteria  The system must provide a robust digital signature mechanism and maintain a secure audit trail.The authenticity verification process must meet the following criteria:      Digital signature mechanism correctly verifies the authenticity and integrity of 100% of unmodified documents    Any modifications or tampering to a document are detected with 100% accuracy    The audit trail records all document-related activities, including creation, modifications, and approvals    Each audit trail entry includes accurate timestamps and user identifiers    The audit trail is tamper-proof, with any attempts at unauthorized modification being detected and logged    Digital signature verification process completes within 5 seconds for documents up to 10MB in size    Audit trail entries are created and logged within 1 second of the corresponding document activity    The system provides a clear, user-friendly interface for users to initiate and understand the results of the authenticity verification process    The audit trail is searchable, allowing authorized users to retrieve the complete history of a document within 30 seconds    The system maintains 99.99% uptime for the authenticity verification service  Source: This scenario has been created with help from ChatGPT by using the prompt create a quality scenario to describe an authenticity requirement."
}, 

{
"id": "-requirements-accountability-detailed-audit-log",
"title": "Detailed audit log",
"author": null,
"tags": ["secure", "suitable"],
"url": "/requirements/detailed-audit-log",
"date": "2023-07-03",
"content": "  Context/Background  The system stores personal data and operates in compliance with privacy and data protection regulations.The system maintains detailed audit logs of all user actions related to personal data.These logs are crucial for ensuring accountability, transparency, and compliance with regulations.The logs facilitate the identification and investigation of any unauthorized or suspicious activities related to personal data.  Source  User submits a request to access personal data stored in the system.  Metric/Acceptance Criteria  The system must maintain a detailed audit log of all user actions, including data access, modification, and deletion.The audit log must meet the following criteria:      Include associated timestamps and user identifiers for each action    Be tamper-proof to prevent unauthorized modifications    Be accessible only to authorized personnel    Be retained for a minimum of five years    Capture 100% of user actions related to personal data    Be searchable and retrievable within 24 hours of a request by authorized personnel    Undergo regular integrity checks to ensure no tampering has occurred    Be backed up securely to prevent data loss    Comply with all relevant privacy and data protection regulations    This “requirement” describes a solution approach to accountability.Source: This scenario has been created with help from ChatGPT by using the prompt create a quality scenario to describe an accountability requirement."
}, 

{
"id": "-requirements-user-tries-primary-function",
"title": "User tries to achieve primary function",
"author": null,
"tags": ["usable"],
"url": "/requirements/user-tries-primary-function",
"date": "2023-06-28",
"content": "  Source  User trying to accomplish a primary task in the application.  Stimulus:  User attempts to use a feature of the software for its intended purpose.  Environment:  The software is operational, running on its standard platform in a typical use-case setting.  Artifact:  The specific feature or function within the software system that the user is interacting with.  Response:  The software provides functionality that allows the user to achieve the desired outcome without any unnecessary steps or interactions.  Response Measure:  Success Rate: 95% of users are able to complete the desired task using the feature on their first attempt.  Efficiency: The average time taken by users to accomplish the task using the feature should not exceed 2 minutes.  Extraneous Steps: Users should not have to undertake more than N necessary steps to achieve the intended outcome, where N is the minimal logical number of steps for that task.  User Feedback: Post-interaction, at least 90% of users should rate their experience with the feature as “Intuitive” or “Very Easy” on a feedback scale."
}, 

{
"id": "-requirements-up-to-date-api",
"title": "Up to date API",
"author": null,
"tags": ["reliable", "suitable"],
"url": "/requirements/up-to-date-api",
"date": "2023-06-28",
"content": "  Background: API provides configuration data from multiple sources. These configurations can be changed and the API should always provide up to date information.  Source: Consumer of the API  Stimulus: Requests data  Reaction: Configuration returned is up to date  Metric: If the configuration is changed, only in 5% of the requests after 30 seconds, the data returned is still the previous configuration."
}, 

{
"id": "-requirements-keep-data-on-error",
"title": "Keep data on error",
"author": null,
"tags": ["reliable", "usable"],
"url": "/requirements/keep-data-on-error",
"date": "2023-06-28",
"content": "  Background: A user wants to open a new bank account and is required to identify herself using an external system  Source: External system that identifies users  Stimulus: Returns an error that identification could not be completed  Reaction: System keeps any data entered by the user  Metric:"
}, 

{
"id": "-requirements-independent-replacement-of-subsystem",
"title": "Independent replacement of subsystem",
"author": null,
"tags": ["flexible", "operable", "efficient"],
"url": "/requirements/independent-replacement-of-subsystem",
"date": "2023-06-28",
"content": "  Background: The system will use an external payment provider. If a different payment provider is chosen, the system needs to be able to quickly adapt to the new payment provider.  Source: Development team  Stimulus: New payment provider needs to be integrated  Reaction: Integration can be done without changing any other subsystem or component  Metric: The following applies to all other subsystems:      The source code remains identical    Compile, build and test processes remain identical    Deployment, installation and configuration remain identical  "
}, 

{
"id": "-requirements-system-runs-offline",
"title": "System runs offline",
"author": null,
"tags": ["reliable", "operable"],
"url": "/requirements/system-runs-offline",
"date": "2023-06-21",
"content": "  Background: Conductor in a train uses device to validate a ticket without any network connection being available. During validation only 5% false-negatives are allowed  Source: Conductor  Stimulus: Validates ticket using device  Reaction: Ticket is validated using certificate information on the device  Metric: When the device is offline, the validation accuracy should not drop below 95%"
}, 

{
"id": "-requirements-order-queue",
"title": "Order queue",
"author": null,
"tags": ["reliable"],
"url": "/requirements/order-queue",
"date": "2023-06-21",
"content": "  Background: The database is down, so orders received from the shop cannot be processed immediately  Source: User  Stimulus: Sends an order to the shop  Reaction: The system detects the database is down and queues the order for 1 day. As soon as the database is back up, the queued orders are processed  Metric: If the database downtime is less than 1 day, the number of orders received must be equals to the number of orders queued."
}, 

{
"id": "-requirements-fast-startup-time",
"title": "Fast startup time (less than 90 sec)",
"author": null,
"tags": ["efficient"],
"url": "/requirements/fast-startup-time",
"date": "2023-06-21",
"content": "  Background: Imagine a mobile phone or a navigation system in your car. Such systems are sometimes in power-off state (aka turned-off).When users power-on (turn on, power-up, start) the system, they want them to be operational (aka usable) in a relatively short time.  This also holds for systems that are automatically managed, e.g. services deployed in the cloud.  Metric: The system must be able to start from power-off to operational state in less than 90 seconds."
}, 

{
"id": "-requirements-fast-deployment",
"title": "Fast deployment",
"author": null,
"tags": ["reliable", "operable"],
"url": "/requirements/fast-deployment",
"date": "2023-06-21",
"content": "  Background: Developer deploys a new version of the application to production  Source: Developer  Stimulus: Deploys a new version of the application  Reaction: Application is fully rolled out in under 2 hours  Metric: Deployment of a new version of the application to production does not take longer than 2 hours"
}, 

{
"id": "-requirements-easy-ui",
"title": "Easy UI",
"author": null,
"tags": ["usable"],
"url": "/requirements/easy-ui",
"date": "2023-06-21",
"content": "  Background: As a user, I want to be able to register my smartphone as a device for a two-factor authentication  Source: User  Stimulus: Wants to register smartphone  Reaction: Configuration setting for adding your smartphone as a device is found within 10 minutes  Metric: 95% of users trying to register their smartphone as a device for a two-factor authentication can access the configuration settings in 10 minutes or less"
}, 

{
"id": "-requirements-add-new-product",
"title": "Add new product under 60 minutes",
"author": null,
"tags": ["suitable", "efficient", "reliable"],
"url": "/requirements/add-new-product",
"date": "2023-06-21",
"content": "  Context/Background  The system is a webshop with an administration panel for editors to manage products.Editors can add new products to the webshop through this administration panel.  Source  Editor uses the administration panel to add a new product to the webshop.  Metric/Acceptance Criteria  The time taken for a newly added product to become visible and available for users in the webshop is 60 minutes or less,for at least 95% of newly added products."
}, 

{
"id": "-requirements-good-readability-score",
"title": "Good code readability score",
"author": null,
"tags": ["reliable"],
"url": "/requirements/good-code-readability-score",
"date": "2023-03-18",
"content": "  Background: We use the SonarQube to obtain several kinds of metrics on the system.  All source code requires a SonarQube cognitive complexity score of 15 or lower.  (See their whitepaper for details)"
}, 

{
"id": "-requirements-data-throughput-for-visual-test-system",
"title": "Data Throughput for Visual Test System",
"author": null,
"tags": ["efficient", "usable"],
"url": "/requirements/data-throughput-for-visual-test-system",
"date": "2023-03-18",
"content": "  Context/Background  The system consists of hardware boards that enhance simple webcams with image recognition capabilities.These boards contain proprietary advanced image recognition algorithms embedded in their firmware.The boards are used in applications such as license-plate recognition systems in public parking facilities.A test and verification system is used to validate firmware updates prior to release.The quality requirement pertains to the performance of this firmware test and verification system.  Source  An update of the firmware is available, typically including additional functionality or improved recognition performance.  Metric/Acceptance Criteria      The test and verification system must process 1000 real-hours of video and image playback in less than 72 hours          This translates to a minimum playback speed of 14 times real-time (1000 hours / 72 hours ≈ 14)        Specific criteria include:              Consistent maintenance of at least 14x playback speed throughout the entire test process (or less if tests are performed in parallel)        Accurate data transmission to the device-under-test at this accelerated rate        No loss of video frames or degradation of image quality during accelerated playback        Verification that the updated firmware recognizes images with at least the accuracy of previous versions        Complete processing of all 1000 hours of test data within the 72-hour timeframe        Accurate logging and reporting of test results, including any anomalies or performance issues detected            "
}, 

{
"id": "-requirements-configurable-gui-theme",
"title": "Configurable UI theme",
"author": null,
"tags": ["flexible", "usable"],
"url": "/requirements/configurable-ui-theme",
"date": "2023-03-18",
"content": "  Scenario: Users can change (customize or configure) the UI theme at runtime.  Background: Most modern browsers allow users to flexibly change the colors, fonts and icons with so-called “themes”."
}, 

{
"id": "-requirements-clarity-in-technical-documentation",
"title": "Clarity in technical documentation",
"author": null,
"tags": ["usable", "reliable"],
"url": "/requirements/clarity-in-technical-documentation",
"date": "2023-03-18",
"content": "  Background  The system is fairly large, and maintained/developed by an internationally distributed and highly heterogenerous, diverse and volatile development team.  Stimulus: Users referr to the documentation to understand technical details or troubleshoot issues.  Artifact: Technical Documentation  Response: The documentation provides coherent and intelligible explanations and instructions.  Response Measure (aka metrics):      At least 90% of the system-specific terms used in the documentation are defined in a glossary section accessible within the same document or via direct links.    The readability score of the documentation, as measured by the Flesch-Kincaid Readability Test, should be between 60 to 70, which corresponds to a 8th to 9th-grade reading level, ensuring it is easily understandable by the average dev-team member.  "
}, 

{
"id": "-requirements-accurate-estimate-of-contract-rate",
"title": "Accurate estimate of insurance contract rate",
"author": null,
"tags": ["usable", "suitable"],
"url": "/requirements/accurate-estimate-of-insurance-rate",
"date": "2023-03-18",
"content": "  Context/Background  The system is an online application for configuring health insurance contracts.The final price of the insurance rate needs to be determined by the backoffice employees of the insurance company due to legal and organizational reasons.This constraint cannot currently be relaxed.  Source  User interaction: A user configures a health insurance contract in the online app.  Metric/Acceptance Criteria  The system must calculate a price estimate based on the currently available information.This estimate must be within a ±15% margin relative to the final price.This can be measured by:      Comparing the system-generated estimate to the final price determined by backoffice employees    Calculating the percentage difference between the estimate and final price    Ensuring that at least 95% of estimates fall within the ±15% margin    Regularly auditing a sample of contracts to verify compliance with this metric  "
}, 

{
"id": "-qualities-vulnerability",
"title": "Vulnerability",
"author": null,
"tags": ["secure", "reliable"],
"url": "/qualities/vulnerability",
"date": "2022-12-28",
"content": "Inability to resist a hazard or to respond when a disaster has occurred.Usually people will require or desire the opposite, avoiding or reducing vulnerability of a system.  A software vulnerability is a defect in software that could allow an attacker to gain control of a system. These defects can be because of the way the software is designed, or because of a flaw in the way that it’s coded.  JFrogWe might differentiate different types of vulnerability:  physical vulnerability,  economical vulnerability,  social vulnerability and  environmental vulnerability.  Vulnerability is related to the characteristics and circumstances of a community or system, these characteristics and circumstances make community or system susceptible to hazard and cause loss. There are many aspects of vulnerability, arising from various physical, social, economic, and environmental factors.  Risk Information Handbook"
}, 

{
"id": "-qualities-versatility",
"title": "Versatility",
"author": null,
"tags": ["flexible", "suitable"],
"url": "/qualities/versatility",
"date": "2022-12-28",
"content": "  able to change easily or to be used for different purposes  Cambridge Dictionary  … having many different abilities  Wiktionary"
}, 

{
"id": "-qualities-user-interface-aesthetics",
"title": "User interface aesthetics",
"author": null,
"tags": ["usable"],
"url": "/qualities/user-interface-aesthetics",
"date": "2022-12-28",
"content": "See also #usable.Definitions:  Capability of a user interface to enable pleasing and satisfying interaction for the user  Derived from ISO-25010-2011"
}, 

{
"id": "-qualities-user-experience",
"title": "User experience",
"author": null,
"tags": ["usable"],
"url": "/qualities/user-experience",
"date": "2022-12-28",
"content": "See also #usable.Definitions:The user experience (UX) is how a user interacts with and experiences a product, system or service. It includes a person’s perceptions of utility, ease of use, and efficiency. Improving user experience is important to most companies, designers, and creators when creating and refining products because negative user experience can diminish the use of the product and, therefore, any desired positive impacts; conversely,  User experience includes all the aspects of the interaction between the end-user with the company, its services, and its products.  Derived from Wikipedia/User-Experience  User-Experience is usability + graphic-design + accessibility  InteractionDesignFoundation"
}, 

{
"id": "-qualities-user-error-protection",
"title": "User error protection",
"author": null,
"tags": ["usable", "operable"],
"url": "/qualities/user-error-protection",
"date": "2022-12-28",
"content": "See also #operable. ISO-25010:2023 sorts it below usability.Definitions:  Capability of a product to protect users against making operation errors  ISO-25010:2023"
}, 

{
"id": "-qualities-user-engagement",
"title": "User engagement",
"author": null,
"tags": ["usable"],
"url": "/qualities/user-engagement",
"date": "2022-12-28",
"content": "See also #usable.Definitions:  Capability of a product to present functions and information in an inviting and motivating manner, supporting continued interaction.This refers to properties of the product that increase the pleasure and satisfaction of the user, such as harmonious colour, intuitive user interface or friendly voice guidance.  ISO-25010:2023  The name of “user engagement” replaces the previous name “user interface aesthetics” (in ISO-25010-2011) as quality subcharacteristic.  Note from ISO-25010:2023"
}, 

{
"id": "-qualities-user-assistance",
"title": "User assistance",
"author": null,
"tags": ["usable"],
"url": "/qualities/user-assistance",
"date": "2022-12-28",
"content": "See also #usable.Definitions:  Capability of a product to be used by people with the widest range of characteristics and capabilities to achieve specified goals in a specified context of use.  ISO-25010:2023Such capabilities include the use of different language, supportive measures for disabilities associated with age, sight, hearing, use of hands, arms and legs, etc.Examples for such capabilities  A system that can interact with users using multiple input/output methods, such as voice, gaze, and touch, in addition to visual display, in order to accommodate differences in vision, hearing, and body parts that can be moved, or changes in these areas.  Software that reads the user’s voice and facial expressions and responds to them, such as conversing with a person.  The name of “user assistance” replaces the previous name “accessibility” (in ISO-25010-2011) as quality subcharacteristic.  Note from ISO-25010:2023"
}, 

{
"id": "-qualities-usability",
"title": "Usability",
"author": null,
"tags": ["usable", "operable"],
"url": "/qualities/usability",
"date": "2022-12-28",
"content": "See also  #usable.  interaction-capability, a term that is used within the ISO-25010:2023 standard as a successor to “usability”Definitions:  Capability of a product to be used by specified users to exchange information between a user and an interactive system via the user interface to complete the intended task.  ISO-25010:2023  Effort required to learn, operate, prepare input, and interpret output of a program.  McCall-1978"
}, 

{
"id": "-qualities-upgradeability",
"title": "Upgradeability",
"author": null,
"tags": ["flexible", "operable"],
"url": "/qualities/upgradeability",
"date": "2022-12-28",
"content": "See also installability  Upgrading is the process of replacing a product with a newer version of the same product. In computing and consumer electronics an upgrade is generally a replacement of hardware, software or firmware with a newer or better version, in order to bring the system up to date or to improve its characteristics.  WikipediaUpgradeability refers to the ability of a software system or product to be easily and efficiently upgraded or updated to newer versions, typically without causing disruptions to existing functionality or requiring significant reconfiguration.An upgradeable system allows for the seamless installation of patches, enhancements, or major version changes while maintaining its reliability, compatibility, and performance.(these explanations were drafted by ChatGPT v 3.5)"
}, 

{
"id": "-qualities-understandability",
"title": "Understandability",
"author": null,
"tags": ["usable", "operable"],
"url": "/qualities/understandability",
"date": "2022-12-28",
"content": "  Understandability is the concept that a system should be presented so that (somebody)  can easily comprehend it. The more understandable a system is, the easier it will be for engineers to change it in a predictable and safe manner.  infoq  A system is understandable if it meets the following criteria:      Complete. The system must be presented using a predefined set of sources (source code, documentation, etc.) to cover all key information. No critical pieces of information may be left to the engineer’s imagination.    Concise. The system source code should not bury the user with an excessive amount of detail. This is where separation of concerns and abstraction come into play, allowing the engineer to focus on the task at hand.    Clear. Use a presentation methodology that is easy for the reader to scan. This is where consistency, coding conventions, source-code formatting, code comments, and syntax highlighting make a huge difference.    Organized. The engineer should be able to easily locate cross-referenced information within the system. This is where modularity, software documentation, source-code navigation controls, and source code management tools allow engineers to find their way around the system.    infoq  This specifies the requirement for the product to be understood by its users. While “usability” refers to ease of use, efficiency, and similar characteristics, “understandability” determines whether the users instinctively know what the product will do for them and how it fits into their view of the world. You can think of understandability as the product being polite to its users and not expecting them to know or learn things that have nothing to do with their business problem. Another aspect of politeness is that the product should not expect the user to input any information to which the product already has access.  Volere Version 2.0"
}, 

{
"id": "-qualities-transparency",
"title": "Transparency",
"author": null,
"tags": ["reliable"],
"url": "/qualities/transparency",
"date": "2022-12-28",
"content": "  Transparency:            the quality of being easy to see through.              a situation in which business and financial activities are done in an open way without secrets, so that people can trust that they are fair and honest:        Cambridge Dictionary"
}, 

{
"id": "-qualities-traceability",
"title": "Traceability",
"author": null,
"tags": ["reliable", "operable"],
"url": "/qualities/traceability",
"date": "2022-12-28",
"content": "  Traceability is the ability to recover all of the artifacts that led to an element having a problem. That includes all the code and dependencies that are included in that element. It also includes the test cases that were run on that element and the tools that were used to produce the element. Errors in tools used in the deployment pipeline can cause problems in production.  Bass et al., 2021      the degree to which a relationship can be established between two or more products of the development process, especially products having a predecessor-successor or primary-subordinate relationship to one another;    the identification and documentation of derivation paths (upward) and allocation or flowdown paths (downward) of work products in the work product hierarchy;    the degree to which each element in a software development product establishes its reason for existing; and    discernible association among two or more logical entities, such as requirements, system elements, verifications, or tasks.    Wikipedia/Requirements traceability"
}, 

{
"id": "-qualities-timeliness",
"title": "Timeliness",
"author": null,
"tags": ["efficient"],
"url": "/qualities/timeliness",
"date": "2022-12-28",
"content": "      Degree to which the response and processing times and throughput rates of a product or system, when performing its functions, meet requirements.    Time behaviour in ISO-25010-2011  "
}, 

{
"id": "-qualities-time-to-market",
"title": "Time to Market",
"author": null,
"tags": ["efficient"],
"url": "/qualities/time-to-market",
"date": "2022-12-28",
"content": "Synonym: Speed-to-Market  Time to market is the length of time it takes to bring a product or product-feature  from conception to production.    Time to market” in software engineering refers to the duration it takes to develop, test, and release a software product or feature from its initial conception. It measures how quickly a software project can go from ideation to being available for users.  A small or low time-to-market allows organizations to respond rapidly to market demands, gain a competitive edge, and deliver value to customers sooner."
}, 

{
"id": "-qualities-time-behaviour",
"title": "Time behaviour",
"author": null,
"tags": ["efficient"],
"url": "/qualities/time-behaviour",
"date": "2022-12-28",
"content": "Definition:  Response and processing times and throughput rates of a product or system, when performing its functions, meet requirements.  ISO-25010-2011Note: Resources can be CPU, memory, storage, processes, threads, network, energy, paper etc."
}, 

{
"id": "-qualities-throughput",
"title": "Throughput",
"author": null,
"tags": ["efficient"],
"url": "/qualities/throughput",
"date": "2022-12-28",
"content": "Network throughput  Network throughput (or just throughput, when in context) refers to the rate of message delivery over a communication channel, such as Ethernet or packet radio, in a communication network. Throughput is usually measured in bits per second (bit/s or bps), and sometimes in data packets per second (p/s or pps) or data packets per time slot.  Wikipedia (Network throughput)  Throughput is a measure of how many units of information a system can process in a given amount of time. It is applied broadly to systems ranging from various aspects of computer and network systems to organizations.  John Burke, TechTarget"
}, 

{
"id": "-qualities-testability",
"title": "Testability",
"author": null,
"tags": ["suitable", "flexible"],
"url": "/qualities/testability",
"date": "2022-12-28",
"content": "  Capability of a product to enable an objective and feasible test to be designed and performed to determine whether a requirement is met.  ISO-25010:2023  Effort required to test a program to ensure it performs its intended function.  McCall-1978"
}, 

{
"id": "-qualities-test-coverage",
"title": "Test Coverage",
"author": null,
"tags": ["suitable", "flexible"],
"url": "/qualities/test-coverage",
"date": "2022-12-28",
"content": "  The term test coverage used in the context of programming / software engineering, refers to measuring how much a software program has been exercised by tests. Coverage is a means of determining the rigour with which the question underlying the test has been answered. There are many kinds of test coverage:      requirements coverage,    code coverage,    feature coverage,    scenario coverage,    screen item coverage,    model coverage.  WikipediaRequirement Coverage  Requirements coverage analysis determines how well the requirements-based testing verified the implementation of the software requirements and establishes traceability between the software requirements and test cases. The requirement coverage ensures:      Did we get a test for each requirement?    The requirements are being tested and brings visibility to the results of the tests.    Establish the traceability between requirements and test cases.  https://thecloudstrap.com/Code Coverage  In computer science, code coverage is a percentage measure of the degree to which the source code of a program is executed when a particular test suite is run.WikipediaThere are different level of code coverages:  Statement Coverage  Condition/Decision Coverage  Modified condition/decision coverage (MC/DC)Statement Coverage  Has each statement in the program been executed?WikipediaCondition/Decision Coverage  Every point of entry and exit in the program has been invoked at least once, every condition in a decision in the program has taken all possible outcomes at least once, and every decision in the program has taken all possible outcomes at least once.WikipediaModified condition/decision coverage  Every point of entry and exit in the program has been invoked at least once, every condition in a decision in the program has taken all possible outcomes at least once, and each condition has been shown to affect that decision outcome independently. A condition is shown to affect a decision’s outcome independently by varying just that condition while holding fixed all other possible conditions. The condition/decision criterion does not guarantee the coverage of all conditions in the module because in many test cases, some conditions of a decision are masked by the other conditions. Using the modified condition/decision criterion, each condition must be shown to be able to act on the decision outcome by itself, everything else being held fixed. The MC/DC criterion is thus much stronger than the condition/decision coverage.Wikipedia"
}, 

{
"id": "-qualities-sustainability",
"title": "Sustainability",
"author": null,
"tags": ["efficient", "reliable"],
"url": "/qualities/sustainability",
"date": "2022-12-28",
"content": "  Sustainability refers to the ability of a system to meet the needs of the present without compromising the ability of future generations to meet their own needs. It emphasizes the long-term viability, resilience, and adaptability of the system, considering environmental, economic, and social factors.  Sustainability in software and systems architecture involves several key aspects:  Environmental Impact: Sustainable architecture aims to reduce the environmental impact of systems. This includes optimizing energy efficiency, minimizing resource consumption, and considering the use of eco-friendly hardware and data centers.  Lifecycle Management: Sustainable software and systems architecture involves considering the entire lifecycle of the software, from design and development to deployment, maintenance, and decommissioning. It seeks to reduce waste and promote efficient resource utilization throughout the lifecycle.  Social Responsibility: Sustainable software and systems architecture takes into account the social impact of technology. It considers ethical implications, diversity and inclusion, and the overall impact on society.This definition was created with help from ChatGPT by using the prompt define the term \"sustainability\" in context of software and systems architecture"
}, 

{
"id": "-qualities-suitability",
"title": "Suitability",
"author": null,
"tags": ["usable", "reliable", "suitable"],
"url": "/qualities/suitability",
"date": "2022-12-28",
"content": "See also functional-suitabilityDefinitions:  Provide functions that meet stated and implied needs of intended users when it is used under specified conditions.  ISO-25010:2023"
}, 

{
"id": "-qualities-startup-time",
"title": "Startup Time",
"author": null,
"tags": ["efficient"],
"url": "/qualities/startup-time",
"date": "2022-12-28",
"content": "Coloquially, the duration required for a system, application, or service to become fully operational and ready to use (by either human users or external systems) from the moment it is initiated."
}, 

{
"id": "-qualities-standard-compliance",
"title": "Standard Compliance",
"author": null,
"tags": ["secure", "safe", "usable", "reliable", "efficient", "suitable"],
"url": "/qualities/standard-compliance",
"date": "2022-12-28",
"content": "a.k.a. compliance"
}, 

{
"id": "-qualities-stability",
"title": "Stability",
"author": null,
"tags": ["reliable"],
"url": "/qualities/stability",
"date": "2022-12-28",
"content": "Stability has two different meanings:  Stability at runtime: free from severe errors that cause interruption of system function.  Stability in development: When adding new features, existing parts can remain largely unchanged.For the second part, consider this quote:  Software stability means the resistance to the amplification of changes in software.  Pan, Weifeng et al."
}, 

{
"id": "-qualities-speed",
"title": "Speed",
"author": null,
"tags": ["efficient"],
"url": "/qualities/speed",
"date": "2022-12-28",
"content": "Rate of motion or velocity.Coloquially, the time required for a system to execute specific functions or operations."
}, 

{
"id": "-qualities-speed-to-market",
"title": "Speed to Market",
"author": null,
"tags": ["efficient"],
"url": "/qualities/speed-to-market",
"date": "2022-12-28",
"content": "See the synonym: Time-to-Market."
}, 

{
"id": "-qualities-simplicity",
"title": "Simplicity",
"author": null,
"tags": ["efficient", "usable"],
"url": "/qualities/simplicity",
"date": "2022-12-28",
"content": "  For software, “simple” means easy to read, understand, and correctly modify.  Complexity is stupid. Simplicity is smart.  Max Kanat-AlexanderPlease note: Max Kanat-Alexander was the person responsible at Google for code health.He has authored a (imho very fine!) book on “Code Simplicity”, which he made available for-free.I quote from this book again:  Why Simplicity?  If any appliance in my house malfunctioned as often as my computer does, I wouldreturn it. Users (and sometimes even programmers) have become used the idea that “software just has bugs.” People seem to just accept that systems will bloat over time, becoming unmaintainable and unstable monstrosities that eventually have to bethrown away and re-written.But none of this is inevitable. Instability, bloat, and various other code problems don’t arise out of some natural law of the universe that requires all software to suck.Instead, they arise almost entirely out of complexity  Max Kanat-Alexander, again…"
}, 

{
"id": "-qualities-self-descriptiveness",
"title": "Self-descriptiveness",
"author": null,
"tags": ["usable"],
"url": "/qualities/self-descriptiveness",
"date": "2022-12-28",
"content": "See also #usable.Definitions:  Capability of a product to present appropriate information, where needed by the user, to make its capabilities and use immediately obvious to the user without excessive interactions with a product or other resources.  ISO-25010:2023Such resources might include user documentation, help desks or other sources of assistance.  Self-descriptiveness requires that the system describes itself. It is closely related to understandability and one approach to making an application easier to understand.  ISO-9241-110"
}, 

{
"id": "-qualities-self-containedness",
"title": "Self-containedness",
"author": null,
"tags": ["flexible"],
"url": "/qualities/self-containedness",
"date": "2022-12-28",
"content": "Definitions:A system is a self-contained system (SCS) if it has the following characteristics:      Each SCS is an autonomous web application. For the SCS’s domain, all data, the logic to process that data and all code to render the web interface is contained within the SCS. An SCS can fulfill its primary use cases on its own, without having to rely on other systems being available.    Each SCS is owned by one team. This does not necessarily mean that only one team can change the code, but the owning team has the final say on what goes into the code base, for example by merging pull-requests.    Communication with other SCSs or 3rd party systems is asynchronous wherever possible. Specifically, other SCSs or external systems should not be accessed synchronously within the SCS’s own request/response cycle. This decouples the systems, reduces the effects of failure, and thus supports autonomy. The goal is decoupling concerning time: An SCS should work even if other SCSs are temporarily offline. This can be achieved even if the communication on the technical level is synchronous, e.g. by replicating data or buffering requests.    An SCS can have an optional service API. Because the SCS has its own web UI, it can interact with the user — without going through a UI service. However, an API for mobile clients or for other SCSs might still be useful.    Each SCS must include data and logic. To really implement any meaningful features both are needed. An SCS should implement features by itself and must therefore include both.    An SCS should make its features usable to end-users via its own UI. Therefore the SCS should have no shared UI with other SCSs. SCSs might still have links to each other. However, asynchronous integration means that the SCS should still work even if the UI of another SCS is not available.    To avoid tight coupling an SCS should share no business code with other SCSs. It might be fine to create a pull-request for an SCS or use common libraries, e.g. database drivers or oAuth clients.    To make SCSs more robust and improve decoupling shared infrastructure can be minimized. E.g. a shared database make fail safeness and scalability of the SCSs depend on the central database. However, due to e.g. costs a shared database with separate schemas or data models per SCS can be a valid alternative.    scs-architecture.org"
}, 

{
"id": "-qualities-security",
"title": "Security",
"author": null,
"tags": ["secure", "reliable"],
"url": "/qualities/security",
"date": "2022-12-28",
"content": "See #secureDefinitions:Protect system against malicious attacks, so that the system continues to function correctly. Security requires at least integrity, availability and non-repudiation.  Capability of a product to protect information and data so that persons or other products have the degree of data access appropriate to their types and levels of authorization, and to defend against attack patterns by malicious actors.  ISO-25010:2023"
}, 

{
"id": "-qualities-securability",
"title": "Securability",
"author": null,
"tags": ["secure"],
"url": "/qualities/securability",
"date": "2022-12-28",
"content": "  Ability of a system to provide different levels of secure access  Wikipedia"
}, 

{
"id": "-qualities-scalability",
"title": "Scalability",
"author": null,
"tags": ["flexible"],
"url": "/qualities/scalability",
"date": "2022-12-28",
"content": "  Scalability is the property of a system to handle a growing amount of work by adding resources to the system.  In computing, scalability is a characteristic of computers, networks, algorithms, networking protocols, programs and applications.  Wikipedia  Capability of a product to handle growing or shrinking workloads or the ease with which the product’s capacity can be adapted to handle variability  ISO-25010:2023"
}, 

{
"id": "-qualities-safety",
"title": "Safety",
"author": null,
"tags": ["safe", "reliable", "secure"],
"url": "/qualities/safety",
"date": "2022-12-28",
"content": "See #safeDefinitions:  Freedom from unacceptable risks.  Capability of a product under defined conditions to avoid a state in which human life, health, property, or the environment is endangered.  ISO-25010:2023  See system safety"
}, 

{
"id": "-qualities-safe-integration",
"title": "Safe integration",
"author": null,
"tags": ["safe", "reliable"],
"url": "/qualities/safe-integration",
"date": "2022-12-28",
"content": "  Capability of a product to maintain safety during and after integration with one or more components.  ISO-25010:2023"
}, 

{
"id": "-qualities-robustness",
"title": "Robustness",
"author": null,
"tags": ["reliable"],
"url": "/qualities/robustness",
"date": "2022-12-28",
"content": "  The ability of the product to continue to function under abnormal circumstances.  Volere+2012, p. 54  In computer science, robustness is the ability of a computer system to cope with errors during execution and cope with erroneous input  Wikipedia"
}, 

{
"id": "-qualities-risk-identification",
"title": "Risk identification",
"author": null,
"tags": ["safe", "reliable"],
"url": "/qualities/risk-identification",
"date": "2022-12-28",
"content": "  Capability of a product to identify a course of events or operations that can expose life, property or environment to unacceptable risk  ISO-25010:2023"
}, 

{
"id": "-qualities-reusability",
"title": "Reusability",
"author": null,
"tags": ["flexible"],
"url": "/qualities/reusability",
"date": "2022-12-28",
"content": "  Capability of a product to be used as assets in more than one system, or in building other assets.  from ISO-25010:2023  Extent to which a program can be used in other applications - related to the packaging and scope of the functions that programs perform.  McCall-1978"
}, 

{
"id": "-qualities-responsiveness",
"title": "Responsiveness",
"author": null,
"tags": ["usable", "efficient"],
"url": "/qualities/responsiveness",
"date": "2022-12-28",
"content": "… the quality of reacting quickly  Responsiveness as a concept of computer science refers to the specific ability of a system or functional unit to complete assigned tasks within a given time.  Wikipedia"
}, 

{
"id": "-qualities-response-time",
"title": "Response Time",
"author": null,
"tags": ["efficient"],
"url": "/qualities/response-time",
"date": "2022-12-28",
"content": "  The time period between a terminal operator’s completion of an inquiry and the receipt of a response. Response time includes the time taken to transmit the inquiry, process it by the computer, and transmit the response back to the terminal. Response time is frequently used as a measure of the performance of an interactive system.  Gartner Glossary"
}, 

{
"id": "-qualities-resource-utilization",
"title": "Resource utilization",
"author": null,
"tags": ["efficient"],
"url": "/qualities/resource-utilization",
"date": "2022-12-28",
"content": "Definition:  Use no more than the specified amount of resources to perform its function under specified conditions.  ISO-25010-2011Note: Resources can be CPU, memory, storage, processes, threads, network, energy, paper etc."
}, 

{
"id": "-qualities-resource-efficiency",
"title": "Resource efficiency",
"author": null,
"tags": ["efficient"],
"url": "/qualities/resource-efficiency",
"date": "2022-12-28",
"content": "  Resource efficiency is the maximising of the supply of money, materials, staff, and other assets that can be drawn on by a person or organization in order to function effectively, with minimum wasted (natural) resource expenses.  WikipediaA special case is performance (synonym: performance efficiency):  Perform its functions within specified time and throughput parameters and be efficient in the use of resources under specified conditions  ISO-25010:2023"
}, 

{
"id": "-qualities-resistance",
"title": "Resistance",
"author": null,
"tags": ["secure"],
"url": "/qualities/resistance",
"date": "2022-12-28",
"content": "See #secureDefinitions:  Capability of a product to sustain operations while under attack from a malicious actor.A malicious attack can include a denial of service attack, a ransomware attack, or other malicious actions.  The following approaches can be applied to improve resistance:      to continuously protect itself from well-known attacks by removing potential flaws or weaknesses of the product with the use of integrated special security product to protect against DoS attacks, ransomware, and so on, which is a reasonable method;    to minimize vulnerability of a product by secure software coding and/or to incorporate security enhancement functions or mechanisms;    to maintain product updated during life time for security reason.    ISO-25010:2023      The security goal that generates the requirement for actions of an entity to be traced uniquely to that entity. This supports non-repudiation, deterrence, fault isolation, intrusion detection and prevention, and after-action recovery and legal action.    A property that ensures that the actions of an entity may be traced uniquely to that entity.    The property of being able to trace activities on a system to individuals who may then be held responsible for their actions.    Computer Security Resource Center"
}, 

{
"id": "-qualities-resilience",
"title": "Resilience",
"author": null,
"tags": ["reliable", "secure"],
"url": "/qualities/resilience",
"date": "2022-12-28",
"content": "  Resilience is the ability to “provide and maintain an acceptable level of service in the face of faults and challenges to normal operation.”  WikipediaThe SEI provides an introduction to resilience:  Basically, a system is resilient if it continues to carry out its mission in the face of adversity.  SEI, see above"
}, 

{
"id": "-qualities-reproducibility",
"title": "Reproducibility",
"author": null,
"tags": ["usable"],
"url": "/qualities/reproducibility",
"date": "2022-12-28",
"content": "  Reproducibility, closely related to replicability and repeatability, is a major principle [where] any results should be documented by making all data and code available in such a way that the computations can be executed again with identical results  Wikipedia  Software reproducibility here means the ability for someone to replicate a computational experiment that was done by someone else, using the same software and data, and then to be able to change part of it (the software and/or the data) to better understand the experiment and its bounds.  Daniel S. Katz’s blog  Reproducibility is described as the repeatability of the process ofestablishing a fact, or of the conditions under which the same factcan  [Mockus+2010]"
}, 

{
"id": "-qualities-replaceability",
"title": "Replaceability",
"author": null,
"tags": ["operable", "flexible"],
"url": "/qualities/replaceability",
"date": "2022-12-28",
"content": "  Capability of a product to replace another specified product for the same purpose in the same environment  ISO-25010:2023      Replaceability can include installability and adaptability.    Replaceability will reduce lock-in risk, so that other software products can be used in place of the present one, for example by the use of standardized file formats.    ISO-25010:2023"
}, 

{
"id": "-qualities-reliability",
"title": "Reliability",
"author": null,
"tags": ["reliable"],
"url": "/qualities/reliability",
"date": "2022-12-28",
"content": "See #reliableDefinition:  Capability of a product to perform specified functions under specified conditions for a specified period of time without interruptions and failures.  Note: Wear does not occur in software. Limitations in reliability are due to results from faults in requirements, design and implementation, or from contextual changes.”  ISO-25010:2023  Dependability is often used as a synonym for reliability. However, dependability has a larger scope in that it includes security, performance efficiency, and continuing support and others in addition to reliability.  ISO-25010:2023  Extent to which a program can be expected to perform its intended function with required precision.  McCall-1978"
}, 

{
"id": "-qualities-releasability",
"title": "Releasability",
"author": null,
"tags": ["operable", "efficient"],
"url": "/qualities/releasability",
"date": "2022-12-28",
"content": "  …the intended release cycle for the product and the form that the release shall take.  Volere+2012, p. 58"
}, 

{
"id": "-qualities-recovery-time",
"title": "Recovery time",
"author": null,
"tags": ["reliable"],
"url": "/qualities/recovery-time",
"date": "2022-12-28",
"content": "see recoverability.  Recoverability refers to the amount of time a system takes to return to its normal operational state after experiencing a failure or disruption. It’s an important aspect of system reliability and resilience. Recovery time can be an indicator of a system’s ability to handle errors and failures gracefully, and it’s often tied to concepts like fault tolerance and high availability.  Definition created with help from ChatGPT 4.0"
}, 

{
"id": "-qualities-recoverability",
"title": "Recoverability",
"author": null,
"tags": ["reliable", "usable"],
"url": "/qualities/recoverability",
"date": "2022-12-28",
"content": "  capability of a product in the event of an interruption or a failure to recover the data directly affected and re-establish the desired state of the system.  ISO-25010:2023  Note: The length of unavailable period following a failure, that a product is not available at the same level of use as before the failure, is determined by its recoverability. However, recoverability of product depends on a recoverability of computer system on which the product operates or a subset of its functions.  ISO-25010:2023"
}, 

{
"id": "-qualities-readability",
"title": "Readability",
"author": null,
"tags": ["usable"],
"url": "/qualities/readability",
"date": "2022-12-28",
"content": "See also:  code readability.  legibility  The fact of being easy to read, or the degree to which something is easy to read.  Cambridge DictionaryFor developers, readability of source code is sometimes a synonym for understandability."
}, 

{
"id": "-qualities-profitability",
"title": "Profitability",
"author": null,
"tags": ["efficient"],
"url": "/qualities/profitability",
"date": "2022-12-28",
"content": "  In economics, profit is the difference between revenue that an economic entity has received from its outputs and total costs of its inputs.  Wikipedia  the degree to which an activity or system yields profit or financial gain.  Oxford dictionary"
}, 

{
"id": "-qualities-privacy",
"title": "Privacy",
"author": null,
"tags": ["secure"],
"url": "/qualities/privacy",
"date": "2022-12-28",
"content": "  Broadly speaking, privacy is the right to be let alone, or freedom from interference or intrusion. Information privacy is the right to have some control over how your personal information is collected and used.  IAPPFrom the General Data Protection Regulation (GDPR)  People’s privacy rights  The GDPR recognizes a litany of new privacy rights for data subjects, which aim to give individuals more control over the data they loan to organizations. As an organization, it’s important to understand these rights to ensure you are GDPR compliant.  Below is a rundown of data subjects’ privacy rights:      The right to be informed    The right of access    The right to rectification    The right to erasure    The right to restrict processing    The right to data portability    The right to object    Rights in relation to automated decision making and profiling.    GDPR.EU"
}, 

{
"id": "-qualities-predictability",
"title": "Predictability",
"author": null,
"tags": ["reliable"],
"url": "/qualities/predictability",
"date": "2022-12-28",
"content": "  Predictability is the degree to which a correct prediction or forecast of a system’s state can be made, either qualitatively or quantitatively.  Wikipedia  In the study of human–computer interaction, predictability is the property to forecast the consequences of a user action given the current state of the system.  WikipediaIn software development, stakeholders might need to predict:  cost and effort required to change or enhance parts of the system  the accuracy by which results can calculated  the resources the system needs to operate  the behaviour of the system when installed or used within different environments (like operating-systems etc.)"
}, 

{
"id": "-qualities-precision",
"title": "Precision",
"author": null,
"tags": ["reliable", "usable"],
"url": "/qualities/precision",
"date": "2022-12-28",
"content": "  Refers to how closely individual measurements agree with each other.  NIST Glossary  Accuracy and precision are two measures of observational error. Accuracy is how close a given set of measurements (observations or readings) are to their true value, while precision is how close the measurements are to each other.  Wikipedia  The quality of being exact and accurate  Cambridge Dictionary"
}, 

{
"id": "-qualities-preciseness",
"title": "Preciseness",
"author": null,
"tags": ["reliable", "usable"],
"url": "/qualities/preciseness",
"date": "2022-12-28",
"content": "see precision"
}, 

{
"id": "-qualities-portability",
"title": "Portability",
"author": null,
"tags": ["flexible", "operable"],
"url": "/qualities/portability",
"date": "2022-12-28",
"content": "  A computer program is said to be portable if there is low effort required to make it run on different environments, operating systems, infrastructures or platforms.  Inspired by WikipediaPortability can be related to source code, configurations and data.For example, data might be encoded in EBCDIC on a mainframe computer, and not readable by modern machines.  Effort required to transfer a program from one hardware configuration and/or software system environment to another.  McCall-1978"
}, 

{
"id": "-qualities-personalization",
"title": "Personalization",
"author": null,
"tags": ["flexible"],
"url": "/qualities/personalization",
"date": "2022-12-28",
"content": "  “… the way in which the product can be altered or configured to take into account the user’s personal preferences or choice of language. The personalization requirements should cover issues such as the following:      Languages, spelling preferences, and language idioms    Currencies, including the symbols and decimal conventions    Personal configuration options    Volere+2012, p. 48"
}, 

{
"id": "-qualities-performance",
"title": "Performance",
"author": null,
"tags": ["efficient"],
"url": "/qualities/performance",
"date": "2022-12-28",
"content": "Definition:  Perform its functions within specified time and throughput parameters and be efficient in the use of resources under specified conditions  ISO-25010:2023Note: Resources can be CPU, memory, storage, processes, threads, network, energy, paper etc.  Performance relative to the amount of resources used under stated conditions.  NOTE: Resources can include other software products, the software and hardware configuration of the system, and materials (e.g. print paper, storage media).  ISO-25010-2011Performance relative to the amount of resources used under stated conditions. Composed of the following sub-characteristics:  Time behaviour - Degree to which the response and processing times and throughput rates of a product or system, when performing its functions, meet requirements.  Resource utilization - Degree to which the amounts and types of resources used by a product or system, when performing its functions, meet requirements.  Capacity - Degree to which the maximum limits of a product or system parameter meet requirements."
}, 

{
"id": "-qualities-performance-efficiency",
"title": "Performance Efficiency",
"author": null,
"tags": ["efficient"],
"url": "/qualities/performance-efficiency",
"date": "2022-12-28",
"content": "(this is a duplicate (content-wise) to performance), but the ISO-25010 standards called it performance efficiency, therefore we include this term too.)Definitions  Perform its functions within specified time and throughput parameters and be efficient in the use of resources under specified conditions  ISO-25010:2023Note: Resources can be CPU, memory, storage, processes, threads, network, energy, paper etc.  Performance relative to the amount of resources used under stated conditions.  NOTE: Resources can include other software products, the software and hardware configuration of the system, and materials (e.g. print paper, storage media).  ISO-25010-2011Performance relative to the amount of resources used under stated conditions. Composed of the following sub-characteristics:  Time behaviour - Degree to which the response and processing times and throughput rates of a product or system, when performing its functions, meet requirements.  Resource utilization - Degree to which the amounts and types of resources used by a product or system, when performing its functions, meet requirements.  Capacity - Degree to which the maximum limits of a product or system parameter meet requirements."
}, 

{
"id": "-qualities-patient-safety",
"title": "Patient Safety",
"author": null,
"tags": ["safe", "reliable", "secure"],
"url": "/qualities/patient-safety",
"date": "2022-12-28",
"content": "See #safeDefinitions:      “The absence of preventable harm to a patient and reduction of risk of unnecessary harm associated with health care to an acceptable minimum.”    World Health Organization  Patient safety is a framework of organized activities that creates cultures, processes, procedures, behaviours, technologies and environments in health care that consistently and sustainably lower risks, reduce the occurrence of avoidable harm, make error less likely and reduce its impact when it does occur. (Quoted from WHO)  See system safety"
}, 

{
"id": "-qualities-operational-environment-requirements",
"title": "Operational and Environment Requirements",
"author": null,
"tags": ["operable"],
"url": "/qualities/operational-environment-requirements",
"date": "2022-12-28",
"content": "  Requirements for Interfacing with Adjacent Systems, Productization Requirements, Release Requirements, Backwards Compatibility Requirements  Volere+2012, p. 57"
}, 

{
"id": "-qualities-operational-constraint",
"title": "Operational constraint",
"author": null,
"tags": ["safe", "reliable"],
"url": "/qualities/operational-constraint",
"date": "2022-12-28",
"content": "  Capability of a product to constrain its operation to within safe parameters or states when encountering operational hazard.  Operational hazard is a hazardous situation, that is circumstance in which people, property or the environment are exposed to unacceptable risk during operation.  ISO-25010:2023      Example 1: A constraint that prevents an airplane from entering a stall condition caused by environmental conditions or pilot error.    Example  2: A constraint that limits the amount of radiation released by a radiology device to a safe threshold regardless of the operator input.    ISO-25010:2023"
}, 

{
"id": "-qualities-operability",
"title": "Operability",
"author": null,
"tags": ["usable", "operable"],
"url": "/qualities/operability",
"date": "2022-12-28",
"content": "See also #operable. ISO-25010:2023 sorts it below usability.Definitions:  Capability of a product to have facilities and attributes that make it easy to operate and control.  Operability is related to controllability, user error robustness and conformity with user expectations.  ISO-25010:2023"
}, 

{
"id": "-qualities-observability",
"title": "Observability",
"author": null,
"tags": ["operable"],
"url": "/qualities/observability",
"date": "2022-12-28",
"content": "  Observability is a measure of how well internal states of a system can be inferred from knowledge of its external outputs.  WikipediaObservability in the context of software engineering refers to the ability to understand and analyze the internal state and behavior of a software system based on the data it generates.Observability encompasses three main pillars: logs, metrics, and traces.Observability allows software engineers to gain a holistic understanding of their systems, enabling them to detect and diagnose issues more effectively.It helps in troubleshooting, performance optimization, capacity planning, and overall system reliability.(This explanation was created with help from ChatGPT v 4.0)"
}, 

{
"id": "-qualities-non-repudiation",
"title": "Non-repudiation",
"author": null,
"tags": ["secure"],
"url": "/qualities/non-repudiation",
"date": "2022-12-28",
"content": "See #secureDefinitions:  Capability of a product to prove that actions or events have taken place, so that the events or actions cannot be repudiated later.  ISO-25010:2023  Non-repudiation refers to a situation where a statement’s author cannot successfully dispute its authorship or the validity of an associated contract. The term is often seen in a legal setting when the authenticity of a signature is being challenged. In such an instance, the authenticity is being “repudiated”.[citation needed]  For example, Mallory buys a cell phone for $100, writes a paper cheque as payment, and signs the cheque with a pen. Later, she finds that she can’t afford it, and claims that the cheque is a forgery. The signature guarantees that only Mallory could have signed the cheque, and so Mallory’s bank must pay the cheque. This is non-repudiation; Mallory cannot repudiate the cheque. In practice, pen-and-paper signatures aren’t hard to forge, but digital signatures can be very hard to break.  Wikipedia"
}, 

{
"id": "-qualities-modularity",
"title": "Modularity",
"author": null,
"tags": ["flexible"],
"url": "/qualities/modularity",
"date": "2022-12-28",
"content": "  Capability of a product to limit changes to one component from affecting other components.  Modularity implies that the product will be composed of discrete modules or components with cohesive content and minimal coupling to other modules or components.  from ISO-25010:2023"
}, 

{
"id": "-qualities-modifiability",
"title": "Modifiability",
"author": null,
"tags": ["flexible"],
"url": "/qualities/modifiability",
"date": "2022-12-28",
"content": "  Capability of a system to be effectively and efficiently modified without introducing defects or degrading existing product quality  from ISO-25010:2023  Modifications includes coding, designing, documenting and verifying/testing such changes.  from ISO-25010:2023  Modifiability is a combination of changeability and stability.  from ISO-25010:2023"
}, 

{
"id": "-qualities-memory-usage",
"title": "Memory usage",
"author": null,
"tags": ["efficient"],
"url": "/qualities/memory-usage",
"date": "2022-12-28",
"content": "A special case of resource utilization and [resource-efficiency]Derived from ISO-25010-2011:Use no more than the specified amount of memory to perform required functions."
}, 

{
"id": "-qualities-mean-time-to-recovery",
"title": "Mean time to recovery",
"author": null,
"tags": ["operable", "suitable"],
"url": "/qualities/mean-time-to-recovery",
"date": "2022-12-28",
"content": "See also deployabilityBelongs to the key devops metrics.  Mean time to recovery (MTTR) measures how long it takes to recover from a partial service interruption or total failure.  quoted from Atlassian  High-performing teams recover from system failures quickly — usually in less than an hour — whereas lower-performing teams may take up to a week to recover from a failure.   The ability to recover quickly from a failure depends on the ability to quickly identify when a failure occurs, and deploy a fix or roll-back any changes that led to the failure. This is usually done by continuously monitoring system health and alerting operations staff in the event of a failure.  quoted from Atlassian  The focus on MTTR is a shift away from the historical practice of focusing on mean time between failures (MTBF). It reflects the increased complexity of modern applications and thus, an increased expectancy of failure.  quoted from Atlassian"
}, 

{
"id": "-qualities-mean-time-between-failures",
"title": "Mean time between failures",
"author": null,
"tags": ["operable"],
"url": "/qualities/mean-time-between-failures",
"date": "2022-12-28",
"content": "See also deployabilityIn DevOps practics, time-between-failures is regarded historical, and superseeded by key devops metrics, especially Mean time to recover (MTTR).  Mean time between failures (MTBF) is the predicted elapsed time between inherent failures of a mechanical or electronic system during normal system operation.  Wikipedia  Current teams often have a focus on MTTR instead of MTBF.  quoted from Atlassian"
}, 

{
"id": "-qualities-maintainability",
"title": "Maintainability",
"author": null,
"tags": ["flexible"],
"url": "/qualities/maintainability",
"date": "2022-12-28",
"content": "Kazman et al. is an extensive technical report covering many aspects of maintainability. Recommended reading.  Maintainability is concerned with modifications after the software baseline is established.      The goal of a maintenance activity is to correct defects, adapt to changing environments, or im-prove a system’s future maintainability or other quality attributes.    The description of a particular maintenance activity is in the eye of the beholder: A particularchange (or type of change) can be labeled differently, depending on the maintainer’s intention.    We measure maintainability as the amount of work required to modify, test, and maintain our softwarebase in response to changes in environmental elements. This measure may depend on who is perform-ing the maintenance task and that individual’s level of skill or knowledge.  from Kazman et al., p.5  Capability of a product to be modified by the intended maintainers with effectiveness and efficiency.      Modifications can include corrections, improvements or adaptation of the product to changes in environment, and in requirements and functional specifications.    Modifications include those carried out by specialized support staff, and those carried out by business or operational staff, or end users.    Maintainability includes installation of updates and upgrades.    Maintainability can be interpreted as either an inherent capability of the product to facilitate maintenance activities, or the quality in use experienced by the maintainers for the goal of maintaining the product.    from ISO-25010:2023  Effort required to locate and fix an error in an operational program.  McCall-1978  Capability of a product to be modified by the intended maintainers with effectiveness and efficiency.      Modifications can include corrections, improvements or adaptation of the product to changes in environment, and in requirements and functional specifications.    Modifications include those carried out by specialized support staff, and those carried out by business or operational staff, or end users.    Maintainability includes installation of updates and upgrades.    Maintainability can be interpreted as either an inherent capability of the product to facilitate maintenance activities, or the quality in use experienced by the maintainers for the goal of maintaining the product.    A quantification of the time necessary to make specified changes to the product.  Volere"
}, 

{
"id": "-qualities-loose-coupling",
"title": "Loose Coupling",
"author": null,
"tags": ["efficient", "flexible", "suitable"],
"url": "/qualities/loose-coupling",
"date": "2022-12-28",
"content": "Definitions:  In computing and systems design, a loosely coupled system is one      in which components are weakly associated (have breakable relationships) with each other, and thus changes in one component least affect existence or performance of another component.    in which each of its components has, or makes use of, little or no knowledge of the definitions of other separate components. Subareas include the coupling of classes, interfaces, data, and services. Loose coupling is the opposite of tight coupling.    Wikipedia  The core principle behing loose coupling is to reduce the assumptions two parties (components, applications, services, programs, users) make about each other when they exchange information.  Book Enterprise Integration PatternsOnline Enterprise Integration Patterns"
}, 

{
"id": "-qualities-longevity",
"title": "Longevity",
"author": null,
"tags": ["reliable", "flexible"],
"url": "/qualities/longevity",
"date": "2022-12-28",
"content": "  This specifies the expected increases in size that the product must be able to handle. As a business grows (or is expected to grow), our software products must increase their capacities to cope with the new volumes.  Volere+2012, p. 55"
}, 

{
"id": "-qualities-localizabiity",
"title": "Localizability",
"author": null,
"tags": ["flexible", "usable"],
"url": "/qualities/localizability",
"date": "2022-12-28",
"content": "  In computing, internationalization and localization (American) or internationalisation and localisation (British English), often abbreviated i18n and L10n, are means of adapting computer software to different languages, regional peculiarities and technical requirements of a target locale.  Internationalization is the process of designing a software application so that it can be adapted to various languages and regions without engineering changes.  Localization is the process of adapting internationalized software for a specific region or language by translating text and adding locale-specific components.  Localization (which is potentially performed multiple times, for different locales) uses the infrastructure or flexibility provided by internationalization (which is ideally performed only once before localization, or as an integral part of ongoing development).  Wikipedia"
}, 

{
"id": "-qualities-legibility",
"title": "Legibility",
"author": null,
"tags": ["usable"],
"url": "/qualities/legibility",
"date": "2022-12-28",
"content": "  The fact of being easy to read, or the degree to which something is easy to read.  The degree to which writing or text can be read easily because the letters are clear, the text is printed well, etc.  Cambridge DictionaryFor developers, legibility of source code is sometimes a synonym for understandability.An extensive source is Delano Oliveira: Evaluating Code Readability and Legibility"
}, 

{
"id": "-qualities-legal",
"title": "Legal Requirements",
"author": null,
"tags": ["usable", "operable"],
"url": "/qualities/legal-requirements",
"date": "2022-12-28",
"content": "  Legal Requirement means any federal, state, local, municipal, foreign or other law, statute, constitution, principle of common law, resolution, ordinance, code, edict, decree, rule, regulation, ruling or requirement issued, enacted, adopted, promulgated, implemented or otherwise put into effect by or under the authority of any Governmental Body.  Law Insider onlineRelated to Data Privacy  As the world becomes more dependent on digital products and services, data privacy has increasingly become a top priority for many countries and regions. As a result, many regions have put in place robust and enforceable data regulations by which businesses are expected to comply.  In most cases, non-compliance with these regulations can not only lead to major financial consequences, but it can also lead to significant and lasting damage to public trust and the reputation of your organization. It is, therefore, important to ensure that your business meets its legal obligations.  iubenda online"
}, 

{
"id": "-qualities-learnability",
"title": "Learnability",
"author": null,
"tags": ["usable", "operable"],
"url": "/qualities/learnability",
"date": "2022-12-28",
"content": "See also #usable.Definitions:  Capability of a product to have specified users learn to use specified product functions within a specified amount of time.  ISO-25010:2023  Capability of a product to have specified users learn to use specified product functions within a specified amount of time.  Requirements specifying how easy it should be to learn to use the product. This learning curve ranges from zero time for products intended for placement in the public domain (e.g., a parking meter or a web site) to a considerable amount of time for complex, highly technical products. (We know of one product where it was necessary for graduate engineers to spend 18 months in a training program before being qualified to use the product.)  Volere"
}, 

{
"id": "-qualities-lead-time-for-changes",
"title": "Lead time for changes",
"author": null,
"tags": ["operable"],
"url": "/qualities/lead-time-for-changes",
"date": "2022-12-28",
"content": "See also deployabilityOne of the four key devops metrics:  Lead time for changes: the length of time between when a code change is committed to the trunk branch and when it is in a deployable state. Not to be confused with cycle time, lead time for changes is the length of time between when a code change is committed to the trunk branch and when it is in a deployable state.  quoted from Atlassian"
}, 

{
"id": "-qualities-latency",
"title": "Latency",
"author": null,
"tags": ["efficient", "usable", "operable"],
"url": "/qualities/latency",
"date": "2022-12-28",
"content": "Latency in general is a time delay between the cause and the effect of some change in a system."
}, 

{
"id": "-qualities-jitter",
"title": "Jitter",
"author": null,
"tags": ["efficient"],
"url": "/qualities/jitter",
"date": "2022-12-28",
"content": "Variation in response time.  In electronics and telecommunications, jitter is the deviation from true periodicity of a presumably periodic signal, often in relation to a reference clock signal.  Wikipedia"
}, 

{
"id": "-qualities-intrusion-prevention",
"title": "Intrusion Prevention",
"author": null,
"tags": ["secure"],
"url": "/qualities/intrusion-prevention",
"date": "2022-12-28",
"content": "See also #secure.Definitions:  Intrusion prevention is the process of performing intrusion detection and attempting to stop detected possible incidents.  NIST Special Publication 800-94  Quality of a software application that it is monitored by an intrusion detection system that is also able to actively prevent or block intrusions that are detected.  Derived from Wikipedia/Intrusion Detection System  Quality of a software application that it is monitored by another system that identifies any suspicious activity and either detects and allows the activity or prevents the threat.  Derived from Checkpoint/Intrusion Prevention System"
}, 

{
"id": "-qualities-intrusion-detection",
"title": "Intrusion Detection",
"author": null,
"tags": ["secure"],
"url": "/qualities/intrusion-detection",
"date": "2022-12-28",
"content": "See also #secure.Definitions:  Intrusion detection is the process of monitoring the events occurring in a computer system or network and analyzing them for signs of possible incidents, which are violations or imminent threats of violation of computer security policies, acceptable use policies, or standard security practices.  NIST Special Publication 800-94  Quality of a software application that its network or itself is monitored for malicious activity or policy violations.  Derived from Wikipedia/Intrusion Detection System  Quality of a software application that it is monitored by another system that detects suspicious activities.  Derived from Checkpoint/Intrusion Detection System"
}, 

{
"id": "-qualities-interoperability",
"title": "Interoperability",
"author": null,
"tags": ["usable", "operable"],
"url": "/qualities/interoperability",
"date": "2022-12-28",
"content": "Definitions:Work (together) with other products or systems.  Capability of a product to exchange information with other products and mutually use the information that has been exchanged.  ISO-25010:2023  Effort required to couple one system with another.  McCall-1978"
}, 

{
"id": "-qualities-internatlionalization",
"title": "Internationalization",
"author": null,
"tags": ["flexible", "usable"],
"url": "/qualities/internationalization",
"date": "2022-12-28",
"content": "  Developing information so that it is suitable for an international audience  ISO/IEC/IEEE 26514:2022  In computing, internationalization and localization (American) or internationalisation and localisation (British English), often abbreviated i18n and L10n, are means of adapting computer software to different languages, regional peculiarities and technical requirements of a target locale.  Internationalization is the process of designing a software application so that it can be adapted to various languages and regions without engineering changes.  Localization is the process of adapting internationalized software for a specific region or language by translating text and adding locale-specific components.  Localization (which is potentially performed multiple times, for different locales) uses the infrastructure or flexibility provided by internationalization (which is ideally performed only once before localization, or as an integral part of ongoing development).  Wikipedia"
}, 

{
"id": "-qualities-interaction-capability",
"title": "Interaction capability",
"author": null,
"tags": ["usable", "operable"],
"url": "/qualities/interaction-capability",
"date": "2022-12-28",
"content": "See also #usable.The term previously used (esp. within the ISO-25010) was usability.Definitions:  capability of a product to be interacted with by specified users to exchange information between a user and a system via the user interface to complete the intended task  Note 1: Interaction capability in the product quality model and its subcharacteristics focus on a set of attributes that enable interaction by users (or operators) to complete specific tasks in a variety of contexts of use. On the other hand, usability as defined in the quality-in-use model (ISO/IEC 25019) comprehensively focuses on outcomes of use to determine whether tasks are achieved by users with effectiveness, efficiency and satisfaction in a specific context of use.  Note 2 to entry: Interaction capability is a prerequisite for usability..  ISO-25010-2023"
}, 

{
"id": "-qualities-integrity",
"title": "Integrity",
"author": null,
"tags": ["secure"],
"url": "/qualities/integrity",
"date": "2022-12-28",
"content": "See #secureDefinitions:  Capability of a product to ensure that the state of its system and data are protected from unauthorized modification or deletion either by malicious action or computer error  ISO-25010:2023  Electronic signals are said to have integrity when there is no corruption of information between one domain and another, such as from a disk drive to a computer display. Such integrity is a fundamental principle of information assurance. Corrupted information is untrustworthy, yet uncorrupted information is of value.  Wikipedia  In common usage, integrity is much more common than its adjectival form, integrous.  Wiktionary  Extent to which access to software or data by unauthorized persons can be controlled.  McCall-1978"
}, 

{
"id": "-qualities-installability",
"title": "Installability",
"author": null,
"tags": ["operable", "flexible"],
"url": "/qualities/installability",
"date": "2022-12-28",
"content": "  Capability of a product to be effectively and efficiently installed successfully and/or uninstalled in a specified environment  ISO-25010:2023"
}, 

{
"id": "-qualities-information-security",
"title": "Information Security",
"author": null,
"tags": ["secure", "reliable"],
"url": "/qualities/information-security",
"date": "2022-12-28",
"content": "See #secureSimilar / synonym to security.Definitions:Protect system against malicious attacks, so that the system continues to function correctly. Security requires at least integrity, availability and non-repudiation.  Information security is the practice of protecting information by mitigating information risks. It is part of information risk management. It typically involves preventing or reducing the probability of unauthorized or inappropriate access to data or the unlawful use, &gt;disclosure, disruption, deletion, corruption, modification, inspection, recording, or devaluation of information. It also involves actions intended to reduce the adverse impacts of such incidents. Protected information may take any form, e.g., electronic or physical, tangible (e.g., paperwork), or intangible (e.g., knowledge). &gt;Information security’s primary focus is the balanced protection of data confidentiality, integrity, and availability (also known as the ‘CIA’ triad) while maintaining a focus on efficient policy implementation, all without hampering organization productivity. This is largely achieved through a structured risk management process. (Wikipedia)  Wikipedia"
}, 

{
"id": "-qualities-independence",
"title": "Independence",
"author": null,
"tags": ["flexible"],
"url": "/qualities/independence",
"date": "2022-12-28",
"content": "Definitions:  Functional independence is achieved by developing functions that perform only one kind of task and do not excessively interact with other modules. Independence is important because it makes implementation more accessible and faster. The independent modules are easier to maintain, test, and reduce error propagation and can be reused in other programs as well. Thus, functional independence is a good design feature which ensures software quality.  javatpoint.comMartin-2018, p. 148 states within the frame of software architecture to have independence the  software architecture must support      The use cases and operations of the system.    The maintenance of the system    The development of the system    The deployment of the system  Use Cases  Use cases are a very natural way to divide the system. Use cases […] change for different reasons. 148 Each software module has one, and only one, reason to change.Martin-2018, p. 59Maintenance/Operation  An architecture that maintains the proper isolation of its components, and does not assume the means of communication between those components, will be much easier to transition through the spectrum of threads, processes, and services as the operational needs of the system change over time.Martin-2018, p. 149Development  A system that must be developed by an organization with many teams and many concerns must have an architecture that facilitates independent actions by those teams so that teams do not interfere with each other during development. This is accomplished by properly partitioning the system into well-isolated, independently developable components.Martin-2018, p. 150Independent Deployment  The decoupling of the use cases and layers also affords a high degree of flexibility in deployment. Indeed, if the decoupling is done well, then it should be possible to hot-swap layers and use cases in running systems.Martin-2018, p. 154"
}, 

{
"id": "-qualities-inclusivity",
"title": "Inclusivity",
"author": null,
"tags": ["usable"],
"url": "/qualities/inclusivity",
"date": "2022-12-28",
"content": "  Capability of a product to be utilised by people of various backgrounds  ISO-25010-2023From a previous version of that standard:  Inclusivity is the degree to which a product or system can be used by people of various backgrounds (such as people of various ages, abilities, cultures, ethnicities, languages, genders, economic situations, etc.)."
}, 

{
"id": "-qualities-immunity",
"title": "Immunity",
"author": null,
"tags": ["secure", "reliable"],
"url": "/qualities/immunity",
"date": "2022-12-28",
"content": "  … what the product has to do to protect itself from infection by unauthorized or undesirable software programs, such as viruses, worms, malware, spyware and any other undesirable interference.  Volere+2012, p. 63"
}, 

{
"id": "-qualities-i18n",
"title": "i18n (Internationalization)",
"author": null,
"tags": ["usable"],
"url": "/qualities/i18n",
"date": "2022-12-28",
"content": "Internationalization (i18n) means designing and developing software so it can be adapted and used in different cultures and languages.See W3C  In computing, internationalization and localization (American) or internationalisation and localisation (British English), often abbreviated i18n and L10n,[1] are means of adapting computer software to different languages, regional peculiarities and technical requirements of a target locale.[2]Internationalization is the process of designing a software application so that it can be adapted to various languages and regions without engineering changes. Localization is the process of adapting internationalized software for a specific region or language by translating text and adding locale-specific components.Localization (which is potentially performed multiple times, for different locales) uses the infrastructure or flexibility provided by internationalization (which is ideally performed only once before localization, or as an integral part of ongoing development).  Wikipedia"
}, 

{
"id": "-qualities-high-availability",
"title": "High availability",
"author": null,
"tags": ["reliable", "usable"],
"url": "/qualities/high-availability",
"date": "2022-12-28",
"content": "Synonym for availability"
}, 

{
"id": "-qualities-hazard-warning",
"title": "Hazard warning",
"author": null,
"tags": ["safe", "reliable"],
"url": "/qualities/hazard-warning",
"date": "2022-12-28",
"content": "  A hazard is a potential source of harm. Substances, events, or circumstances can constitute hazards when their nature would allow them, even just theoretically, to cause damage to health, life, property, or any other interest of value.  Wikipedia/Hazard  Capability of a productto provide warnings of unacceptable risks to operations or internal controls so that they can react in sufficient time to sustain safe operations.  ISO-25010:2023"
}, 

{
"id": "-qualities-graceful-degradation",
"title": "Graceful degradation",
"author": null,
"tags": ["reliable", "usable"],
"url": "/qualities/graceful-degradation",
"date": "2022-12-28",
"content": "  The ability of maintaining functionality when portions of a system break down.  A system that is designed to fail safe, or fail-secure, or fail gracefully, whether it functions at a reduced level or fails completely, does so in a way that protects people, property, or data from injury, damage, intrusion, or disclosure. A program might fail-safe by executing a graceful exit (as opposed to an uncontrolled crash) in order to prevent data corruption after experiencing an error.  Wikipedia"
}, 

{
"id": "-qualities-functionality",
"title": "Functionality",
"author": null,
"tags": ["usable", "reliable", "suitable"],
"url": "/qualities/functionality",
"date": "2022-12-28",
"content": "The main system or product features.  Functionality is the ability of the system to do the work for which it was intended.  Bass et al., 2021  Functionality describes what the system does and quality describes how well the system does its function. That is, qualities are attributes of the system and function is the purpose of the system.  Bass et al., 2021"
}, 

{
"id": "-qualities-functional-suitability",
"title": "Functional suitability",
"author": null,
"tags": ["usable", "reliable", "suitable"],
"url": "/qualities/functional-suitability",
"date": "2022-12-28",
"content": "See also suitabilityDefinitions:  Provide functions that meet stated and implied needs of intended users when it is used under specified conditions.  ISO-25010:2023"
}, 

{
"id": "-qualities-functional-correctness",
"title": "Functional correctness",
"author": null,
"tags": ["usable", "reliable", "suitable"],
"url": "/qualities/functional-correctness",
"date": "2022-12-28",
"content": "See also correctnessDefinitions:  Provide accurate results when used by intended users for intended functions.  ISO-25010:2023"
}, 

{
"id": "-qualities-functional-completeness",
"title": "Functional completeness",
"author": null,
"tags": ["usable", "reliable", "suitable"],
"url": "/qualities/functional-completeness",
"date": "2022-12-28",
"content": "Definitions:  Provide a set of functions that covers all the specified tasks and intended users’ objectives.  ISO-25010:2023"
}, 

{
"id": "-qualities-functional-appropriateness",
"title": "Functional Appropriateness",
"author": null,
"tags": ["usable", "reliable", "suitable"],
"url": "/qualities/functional-appropriateness",
"date": "2022-12-28",
"content": "Definitions:  Provide functions that avoid behaviours or interactions that are irrelevant to accomplishing a specific task under specified conditions and do not provide functions that are not.  ISO-25010:2023"
}, 

{
"id": "-qualities-flexibility",
"title": "Flexibility",
"author": null,
"tags": ["flexible"],
"url": "/qualities/flexibility",
"date": "2022-12-28",
"content": "  Applies to several stages in the life of a system or product, for example:      at development or compile time,    installation or deployment time,    during testing    at runtime    Capability of a product to:      serve a different or expanded set of requirements    work with different infrastructures or environments    ISO-25010:2023  Flexibility to context of use should consider two distinguished aspects, i.e., technical and non-technical. Technical aspect is related with execution environment of products, such as software, hardware and communication facility, and non-technical aspect is related with social environment ,such as user and task, and physical environment, such as climate and nature.  ISO-25010:2023The ease with which the product can be:  adapted to changes in its requirements, or infrastructure  modified without introducing defects,  transferred to different hardware, software or other operational or usage environmentsA system can easily be changed (as opposed to agility, which means that system can rapidly be changed.)  Effort required to modify an operational program.  McCall-1978"
}, 

{
"id": "-qualities-features",
"title": "Features",
"author": null,
"tags": ["usable"],
"url": "/qualities/features",
"date": "2022-12-28",
"content": "A feature is a unique characteristic that a product has or should have.In Scrum, a feature often refers to a backlog item.A feature is a “bit of functionality” with value for users or customers.A product having more features will be considered of higher quality than others.Although a product should not have unwanted features."
}, 

{
"id": "-qualities-faultlessness",
"title": "Faultlessness",
"author": null,
"tags": ["reliable", "usable", "secure"],
"url": "/qualities/faultlessness",
"date": "2022-12-28",
"content": "Definitions:  Capability of a product to perform specified functions without fault under normal operation.  ISO-25010:2023  The term “faultlessness” replaces the previous name “maturity (in ISO-25010-2011) as quality subcharacteristic.  ISO-25010:2023"
}, 

{
"id": "-qualities-fault-tolerance",
"title": "Fault tolerance",
"author": null,
"tags": ["reliable", "usable"],
"url": "/qualities/fault-tolerance",
"date": "2022-12-28",
"content": "  Capability of a product to operate as intended despite the presence of hardware or software faults.  ISO-25010:2023  Fault tolerance is the property that enables a system to continue operating properly in the event of the failure of one or more faults within some of its components. If its operating quality decreases at all, the decrease is proportional to the severity of the failure, as compared to a naively designed system, in which even a small failure can cause total breakdown. Fault tolerance is particularly sought after in high-availability, mission-critical, or even life-critical systems. The ability of maintaining functionality when portions of a system break down is referred to as graceful degradation.  WikipediaA special case is the byzantine fault tolerance (BFT): In that case, some components may fail, but there is imperfect information on whether a component has failed.See the detailed explanation on Wikipedia on BFT."
}, 

{
"id": "-qualities-fault-isolation",
"title": "Fault isolation",
"author": null,
"tags": ["safe", "reliable"],
"url": "/qualities/fault-isolation",
"date": "2022-12-28",
"content": "An method that enables to identify which component or parameter of the system is responsible for a fault or the symptoms of the faulty behavior.  Fault detection, isolation, and recovery (FDIR) is a subfield of control engineering which concerns itself with monitoring a system, identifying when a fault has occurred, and pinpointing the type of fault and its location. Two approaches can be distinguished: A direct pattern recognition of sensor readings that indicate a fault and an analysis of the discrepancy between the sensor readings and expected values, derived from some model. In the latter case, it is typical that a fault is said to be detected if the discrepancy or residual goes above a certain threshold. It is then the task of fault isolation to categorize the type of fault and its location in the machinery.  Wikipedia/FDIR"
}, 

{
"id": "-qualities-fail-safe",
"title": "Fail safe",
"author": null,
"tags": ["safe", "reliable"],
"url": "/qualities/fail-safe",
"date": "2022-12-28",
"content": "  Capability of a product to automatically place itself in a safe operating mode, or to revert to a safe condition in the event of a failure  ISO-25010:2023  In engineering, a fail-safe is a design feature or practice that in the event of a specific type of failure, inherently responds in a way that will cause minimal or no harm to other equipment, to the environment or to people. Unlike inherent safety to a particular hazard, a system being “fail-safe” does not mean that failure is impossible or improbable, but rather that the system’s design prevents or mitigates unsafe consequences of the system’s failure.  That is, if and when a “fail-safe” system fails, it remains at least as safe as it was before the failure.  Wikipedia/Fail-safe"
}, 

{
"id": "-qualities-extensibility",
"title": "Extensibility",
"author": null,
"tags": ["flexible"],
"url": "/qualities/extensibility",
"date": "2022-12-28",
"content": "Ability to add new features or functions to a system.Example: The plugin system of modern IDEs, like VS-Code."
}, 

{
"id": "-qualities-explainability",
"title": "Explainability",
"author": null,
"tags": ["safe", "suitable"],
"url": "/qualities/explainability",
"date": "2022-12-28",
"content": "Explainability is a quality sometimes required in the context of Artificial Intelligence (AI). The European’s proposed AI Act will probably contain obligations for some AI systems to provide explanations about decisions that impact user rights.Definitions  A system S is explainable with respect to an aspect X of S relative to an addressee A in context C if and only if there is an entity E (the explainer) who, by giving a corpus of information I (the explanation of X), enables A to understand X of S in C.L. Chazette, W. Brunotte and T. Speith, “Exploring Explainability: A Definition, a Model, and a Knowledge Catalogue,” 2021 IEEE 29th International Requirements Engineering Conference (RE), Notre Dame, IN, USA, 2021, pp. 197-208, doi: 10.1109/RE51729.2021.00025.  Explainable AI (XAI) [..] either refers to an AI system over which it is possible for humans to retain intellectual oversight, or to the methods to achieve this.Wikipedia  [..] local explainability helps answer the question, “for this particular example, why did the model make this particular decision?”  Cohort explainability is the process of understanding to what degree your model’s features contribute to its predictions over a subset of your data.  We consider an ML engineer to have access to global model explainability if across all predictions they are able to attribute which features contributed the most to the model’s decisions.Towards Datascience"
}, 

{
"id": "-qualities-expected-physical-environment",
"title": "Expected physical environment",
"author": null,
"tags": ["suitable", "operable"],
"url": "/qualities/expected-physical-environment",
"date": "2022-12-28",
"content": "  … specifies the physical environment in which the product will operate.  Volere+2012, p. 56"
}, 

{
"id": "-qualities-energy-efficiency",
"title": "Energy Efficiency",
"author": null,
"tags": ["efficient"],
"url": "/qualities/energy-efficiency",
"date": "2022-12-28",
"content": "Source: This explanation has been created with help from ChatGPT by using the prompt explain \"energy efficiency\" in context of software engineering.  In the context of software engineering, “energy efficiency” refers to the ability of a software system to optimize its energy consumption while performing its intended tasks effectively. It involves designing and implementing software in a way that minimizes the amount of energy required to run the system, without compromising its functionality, performance, or user experience.  Energy efficiency has become a crucial consideration in modern software development due to the growing awareness of environmental sustainability and the increasing energy consumption of data centers and computing devices. As software systems have become more complex and resource-demanding, their energy consumption has also risen significantly.  There are several aspects to consider for achieving energy efficiency in software engineering:  Algorithmic Efficiency: Choosing efficient algorithms and data structures can significantly impact the energy consumption of a system. Algorithms with lower computational complexity and optimized data structures can reduce processing time, resulting in energy savings.  Resource Management: Properly managing system resources, such as CPU, memory, and network, can help reduce unnecessary energy usage. Implementing techniques like dynamic resource allocation, resource pooling, and power-saving modes can lead to more efficient resource utilization.Minimized Redundancy: Eliminating redundant computations and unnecessary operations in the code can reduce energy consumption. By streamlining the code and avoiding unnecessary processing, energy efficiency can be improved.Performance Optimization: Improving the overall performance of the system can lead to energy savings. Faster execution of tasks allows the system to enter power-saving states sooner, reducing the overall energy consumption.Power Management: Incorporating power management features into software, such as sleep mode, hibernation, and intelligent power management, can help reduce energy usage during idle periods.Green Computing: Considering the energy efficiency of hardware components during system design can contribute to overall energy savings. Opting for energy-efficient hardware can complement the software's energy-saving efforts.Energy-Aware Design: Considering energy efficiency as a design requirement from the early stages of software development can lead to more energy-efficient solutions."
}, 

{
"id": "-qualities-elasticity",
"title": "Elasticity",
"author": null,
"tags": ["flexible"],
"url": "/qualities/elasticity",
"date": "2022-12-28",
"content": "  In distributed system and system resource, elasticity is defined as “the degree to which a system is able to adapt to workload changes by provisioning and de-provisioning resources in an autonomic manner, such that at each point in time the available resources match the current demand as closely as possible”  WikipediaNote: Wikipedia quotes Herbst, Nikolas; Samuel Kounev; Ralf Reussner (2013). “Elasticity in Cloud Computing: What It Is, and What It Is Not” (PDF). Proceedings of the 10th International Conference on Autonomic Computing (ICAC 2013), San Jose, CA, June 24–28.Elasticity is the ability of a system to adapt to workload changes by dynamic scaling."
}, 

{
"id": "-qualities-efficiency",
"title": "Efficiency",
"author": null,
"tags": ["efficient"],
"url": "/qualities/efficiency",
"date": "2022-12-28",
"content": "See tag efficientDefinitions  capable of producing desired results with little or no waste (as of time or materials)  Merriam-Webster  Efficiency is the often measurable ability to avoid wasting materials, energy, efforts, money, and time in doing something or in producing a desired result. In a more general sense, it is the ability to do things well, successfully, and without waste.  WikipediaSometimes efficiency is misunderstood for effectiveness:Therefore, please remember:Efficiency is doing things right, while effectiveness is doing the right things.  The words effective and efficient both mean “capable of producing a result,” but there is an important difference. Effective means “producing a result that is wanted”. Efficient means “capable of producing desired results without wasting materials, time, or energy”.  The difference is that when something is effective it produces a result even if it takes some unnecessary resources to do so. When something is efficient, not only does it produce a result, but it does so in a quick or simple way using as little material, time, effort, or energy as possible. The following example sentences show how the two words are used.  Britannica.com"
}, 

{
"id": "-qualities-effectiveness",
"title": "Effectiveness",
"author": null,
"tags": ["efficient"],
"url": "/qualities/effectiveness",
"date": "2022-12-28",
"content": "  Effectiveness is the capability of producing a desired result or the ability to produce desired output.  WikipediaSometimes effectiveness is misunderstood for efficiency.Therefore, please remember:  Efficiency is doing things right, while effectiveness is doing the right things.  The words effective and efficient both mean “capable of producing a result,” but there is an important difference. Effective means “producing a result that is wanted”. Efficient means “capable of producing desired results without wasting materials, time, or energy”.  The difference is that when something is effective it produces a result even if it takes some unnecessary resources to do so. When something is efficient, not only does it produce a result, but it does so in a quick or simple way using as little material, time, effort, or energy as possible. The following example sentences show how the two words are used.  Britannica.com"
}, 

{
"id": "-qualities-ease-of-use",
"title": "Ease of Use",
"author": null,
"tags": ["operable", "usable"],
"url": "/qualities/ease-of-use",
"date": "2022-12-28",
"content": "  Ease of use is a basic concept that describes how easily users can use a product. Design teams define specific metrics per project—e.g., “Users must be able to tap Find within 3 seconds of accessing the interface.”—and aim to optimize ease of use while offering maximum functionality and respecting business limitations.  Interaction-Design.org  A metric of satisfaction in using a product as established by one or more individuals using the product.  NIST Glossary  describes your client’s aspirations for how easy it is for the intended users of the product to operate it. The product’s usability is derived from the abilities of the expected users of the product and the complexity of its functionality.The usability requirements should cover properties such as these:      Efficiency of use: How quickly or accurately the user can use the product.    Ease of remembering: How much the casual user is expected to remember about using the product.    Error rates: For some products it is crucial that the user commits very few, or no, errors.    Overall satisfaction in using the product: This is especially important for commercial, interactive products that face a lot of competition. Web sites are a good example.    Feedback: How much feedback the user needs to feel confident that the product is actually accurately doing what the user expects. The necessary degree of feedback will be higher for some products (e.g., safety-critical products) than for others. (VOLERE V20)”    Volere+2012, p. 47"
}, 

{
"id": "-qualities-devops-metrics",
"title": "Devops-Metrics",
"author": null,
"tags": ["operable"],
"url": "/qualities/devops-metrics",
"date": "2022-12-28",
"content": "See also deployabilityFour key devops metrics:      Lead time for changes: the length of time between when a code change is committed to the trunk branch and when it is in a deployable state.    Change failure rate: the percentage of code changes that require hot fixes or other remediation after production.    Deployment frequency: how often new code is deployed into production      Mean time to recovery: how long it takes to recover from a partial service interruption or total failure.    quoted from AtlassianFor a slightly more detailed introduction, see the four metrics themselves:  Lead time for changes  Change failure rate  Deployment frequency  Mean time to recovery"
}, 

{
"id": "-qualities-deployment-frequency",
"title": "Deployment frequency",
"author": null,
"tags": ["operable", "suitable"],
"url": "/qualities/deployment-frequency",
"date": "2022-12-28",
"content": "See also deployabilityBelongs to the key devops metrics.  Deployment frequency: how often new code is deployed into production.    quoted from Atlassian  Many practitioners use the term “delivery” to mean code changes that are released into a pre-production staging environment, and reserve “deployment” to refer to code changes that are released into production.    quoted from Atlassian  High-performing teams can deploy changes on demand, and often do so many times a day. Lower-performing teams are often limited to deploying weekly or monthly.    The ability to deploy on demand requires an automated deployment pipeline that incorporates automated testing and feedback mechanisms, and minimizes the need for human intervention.   quoted from Atlassian"
}, 

{
"id": "-qualities-deployability",
"title": "Deployability",
"author": null,
"tags": ["operable", "suitable"],
"url": "/qualities/deployability",
"date": "2022-12-28",
"content": "See also #operable.  Deployability refers to a property of software indicating that it may be deployed, that is, allocated to an environment for execution—within a predictable and acceptable amount of time and effort. Moreover, if the new deployment is not meeting its specifications, it may be rolled back, again within a predictable and acceptable amount of time and effort.  Bass et al., 2021Closely related to this quality are the devops metrics"
}, 

{
"id": "-qualities-dependability",
"title": "Dependability",
"author": null,
"tags": ["reliable"],
"url": "/qualities/dependability",
"date": "2022-12-28",
"content": "See #reliableDefinitions:  Ability to perform as and when required.  IEC 60050-192  In systems engineering, dependability is a measure of a system’s availability, reliability, maintainability, and in some cases, other characteristics such as durability, safety and security. In real-time computing, dependability is the ability to provide services that can be trusted within a time-period. The service guarantees must hold even when the system is subject to attacks or natural failures.  Wikipedia  Dependability is often used as a synonym for reliability. However, dependability has a larger scope in that it includes security, performance efficiency, and continuing support and others in addition to reliability.  ISO-25010:2023The IEC-6050-192 (Standard on Dependability):  — Availability: ability to be in a state to perform as required. SOURCE: IEC 60050-192-01-23— Reliability: ability to perform as required, without failure, for a given time interval, under given conditions. SOURCE: IEC 60050-192-01-24— Recoverability: ability to recover from a failure, without corrective maintenance SOURCE: IEC 60050-192-01-25— Maintainability: ability to be retained in, or restored to a state to perform as required, under given conditions of use and maintenance. SOURCE: IEC 60050-192-01-27— Maintenance support performance: effectiveness of an organization in respect of maintenance support. SOURCE: IEC 60050-192-01-29— Durability: ability to perform as required, under given conditions of use and maintenance, until the end of useful life. SOURCE: IEC 60050-192-01-21  ISO-25010:2023, Annex-B"
}, 

{
"id": "-qualities-DORA",
"title": "DORA Metrics",
"author": null,
"tags": ["operable"],
"url": "/qualities/DORA-metrics",
"date": "2022-12-28",
"content": "DORA stands for DevOps Research and AssessmentSee devops-metrics."
}, 

{
"id": "-qualities-cycle-time",
"title": "Cycle time",
"author": null,
"tags": ["operable", "suitable", "efficient"],
"url": "/qualities/cycle-time",
"date": "2022-12-28",
"content": "See also deployabilityBelongs to the key devops metrics.  Time a team spends working on an item until it is ready for shipment. In the development world, cycle time is the time from when developers make a commit to the moment it’s deployed to production. This key DevOps metric helps project leads and engineering managers better understand what works well in the development pipeline.  From the introductory article by AtlassianCycle time starts when a task is moved to “In Progress” and ends when it is marked “Done”.Not to be confused with lead-time-for-changes."
}, 

{
"id": "-qualities-cyber-security",
"title": "Cyber Security",
"author": null,
"tags": ["secure"],
"url": "/qualities/cyber-security",
"date": "2022-12-28",
"content": "See also information security and all other qualities tagged with #secure.The term cyber security refers to all measures that serve to protect critical IT infrastructure, networks and data from digital attacks. The focus of cyber security or IT security is on defending against all digital attacks from internal or external sources that aim to access company systems or data without authorization."
}, 

{
"id": "-qualities-customizability",
"title": "Customizability",
"author": null,
"tags": ["flexible", "usable"],
"url": "/qualities/customizability",
"date": "2022-12-28",
"content": "Change aspects or properties of a system based upon personal preferences.  The ability of software to be changed by the user  PCMag"
}, 

{
"id": "-qualities-credibility",
"title": "Credibility",
"author": null,
"tags": ["reliable"],
"url": "/qualities/credibility",
"date": "2022-12-28",
"content": "  Credibility comprises the objective and subjective components of the believability of a source or message.  WikipediaIn the context of software engineering and IT systems, “credibility” refers to the degree to which a software system or technology is perceived as trustworthy and reliable by its users and other stakeholders. TThis perception is crucial because it influences user acceptance, satisfaction, and ultimately the success of the technology in the marketplace or operational environment.(explanation crafted with help of ChatGPT Version 4.0)"
}, 

{
"id": "-qualities-cost",
"title": "Cost",
"author": null,
"tags": ["suitable", "efficient"],
"url": "/qualities/cost",
"date": "2022-12-28",
"content": "  …the value of money that has been used up to produce something or deliver a service, and hence is not available for use anymore.  Wikipedia"
}, 

{
"id": "-qualities-correctness",
"title": "Correctness",
"author": null,
"tags": ["usable", "reliable", "suitable"],
"url": "/qualities/correctness",
"date": "2022-12-28",
"content": "See also functional-correctnessDefinitions:  Provide accurate results when used by intended users for intended functions.  ISO-25010:2023  Extent to which a program satisfies its specifications and fulfills the user’s mission objectives.  McCall-1978"
}, 

{
"id": "-qualities-convenience",
"title": "Convenience",
"author": null,
"tags": ["usable"],
"url": "/qualities/convenience",
"date": "2022-12-28",
"content": "  … things the product shall do to simplify tasks, and to expedite and make the user/customer’s work easier and smoother.  Volere"
}, 

{
"id": "-qualities-controllability",
"title": "Controllability",
"author": null,
"tags": ["usable", "operable"],
"url": "/qualities/controllability",
"date": "2022-12-28",
"content": "In context of Usability  The interface will allow the user to perceive that they are in control and will allow appropriate control.  Stanford University Usability PrinciplesIn context of DevOps  In the context of DevOps, controllability refers to the ability to effectively manage, manipulate, and influence the behavior of systems and processes throughout the software development and deployment lifecycle. Key aspects are:      Infrastructure Control    Deployment Control    Monitoring and Observability    Devops.com"
}, 

{
"id": "-qualities-consistency",
"title": "Consistency",
"author": null,
"tags": ["usable", "efficient"],
"url": "/qualities/consistency",
"date": "2022-12-28",
"content": "  Free from variation or contradiction  Merriam-Webster"
}, 

{
"id": "-qualities-configurability",
"title": "Configurability",
"author": null,
"tags": ["flexible", "usable"],
"url": "/qualities/configurability",
"date": "2022-12-28",
"content": "configurable, ConfigurabilityConfigurability refers to the ability of a system, software application, or hardware device to be easily customized and adapted to suit various requirements, preferences, and environments. A configurable system allows users or administrators to modify its settings, features, or behavior without the need for extensive code changes or hardware modifications. Configurability empowers users to tailor the system to their specific needs, making it more versatile and adaptable."
}, 

{
"id": "-qualities-confidentiality",
"title": "Confidentiality",
"author": null,
"tags": ["secure"],
"url": "/qualities/confidentiality",
"date": "2022-12-28",
"content": "See #secureDefinitions:  Capability of a product to ensure that data are accessible only to those authorized to have access.  ISO-25010:2023"
}, 

{
"id": "-qualities-conciseness",
"title": "Conciseness",
"author": null,
"tags": ["usable", "efficient"],
"url": "/qualities/conciseness",
"date": "2022-12-28",
"content": "  Giving a lot of information clearly and in a few words; brief but comprehensive.  Oxford Dictionary  marked by brevity of expression or statement : free from all elaboration and superfluous detail  Merriam-Webster"
}, 

{
"id": "-qualities-composability",
"title": "Composability",
"author": null,
"tags": ["flexible"],
"url": "/qualities/composability",
"date": "2022-12-28",
"content": "Definition:  Composability is a system design principle that deals with the inter-relationships of components. A highly composable system provides components that can be selected and assembled in various combinations to satisfy specific user requirements.  WikipediaComposability refers to the design principle of creating modular, reusable software components that can be combined and recombined to build new applications and systems. The key aspects of composability include:  Modularity: Components are designed to do one thing well, are self-contained, and can be deployed independently.  Autonomy: Components don’t depend on other components and can be updated independently without affecting the rest of the system.  Discoverability: Components and their capabilities are easy to find and integrate into new systems.  Reusability: Components can be reused across multiple projects and systems without needing significant modifications.  Interoperability: Components can communicate and exchange data with each other through well-defined interfaces."
}, 

{
"id": "-qualities-compliance",
"title": "Compliance",
"author": null,
"tags": ["secure", "safe", "usable", "reliable", "efficient", "suitable"],
"url": "/qualities/compliance",
"date": "2022-12-28",
"content": "How well does the system or product obeys the rules of a given standard.Some examples for standards in software development:  ISO 12207 Software life cycle processes  ISO 25010: Software Product Quality  ISO 27001: Information Security  ISO 26262: Road vehicles – Functional safety  ISO 29119: Software Testing"
}, 

{
"id": "-qualities-compatibility",
"title": "Compatibility",
"author": null,
"tags": ["usable", "operable", "reliable"],
"url": "/qualities/compatibility",
"date": "2022-12-28",
"content": "Definitions:  Capability of a product to exchange information with other products, and/or to perform its required functions while sharing the same common environments and resources.  ISO-25010:2023  Software compatibility is a characteristic of software components or systems which can operate satisfactorily together on the same computer, or on different computers linked by a computer network. It is possible that some software components or systems may be compatible in one environment and incompatible in another.  Wikipedia  Capability of a program to be executed on different types of computers without modification of the program or the computers.  modified from Wikipedia  a state in which two things are able to exist or occur together without problems or conflict.  Oxford Dictionary  A family of computer models is said to be compatible if certain software that runs on one of the models can also be run on all other models of the family.  Wikipedia/Computer_compatibilityIncompatibility  Software incompatibility is a characteristic of software components or systems which cannot operate satisfactorily together on the same computer, or on different computers linked by a computer network.  Wikipedia"
}, 

{
"id": "-qualities-communicability",
"title": "Communicability",
"author": null,
"tags": ["usable"],
"url": "/qualities/communicability",
"date": "2022-12-28",
"content": "Definitions:  Communicability in software systems refers to the clarity and effectiveness with which the system conveys its functions and usability to the user. This includes the design of the user interface, the presentation of information, and the system’s ability to guide and assist users in accomplishing their tasks.  modified by G.Starke, originated from Prates+2000(Definition contributed by P.Hechler)"
}, 

{
"id": "-qualities-cohesion",
"title": "Cohesion",
"author": null,
"tags": ["efficient", "flexible", "suitable"],
"url": "/qualities/cohesion",
"date": "2022-12-28",
"content": "  In computer programming, cohesion refers to the degree to which the elements inside a module belong together.  Cohesion is an ordinal type of measurement and is usually described as “high cohesion” or “low cohesion”. Modules with high cohesion tend to be preferable, because high cohesion is associated with several desirable traits of software including robustness, reliability, reusability, and understandability. WikipediaAnd, from a gem of software engineering literature (“Structured Design” by Ed Yourdon and Larry Constantine) from 1978:  How tightly bound or related its internal elements are to one another.  Yourdon &amp; Constantine: Structured Design, 1978"
}, 

{
"id": "-qualities-coherence",
"title": "Coherence",
"author": null,
"tags": ["usable", "efficient"],
"url": "/qualities/coherence",
"date": "2022-12-28",
"content": "  Logically or aesthetically ordered or integrated  Merriam-Webster  Logical and consistent  Oxford dictionary  The situation when the parts of something fit together in a natural or reasonable way:      There was no coherence between the first and the second half of the movie.    cambridge dictionary"
}, 

{
"id": "-qualities-code-readability",
"title": "Code Readability",
"author": null,
"tags": ["usable", "efficient"],
"url": "/qualities/code-readability",
"date": "2022-12-28",
"content": "  Readability, to me, means that the code is easy to follow, logically.      Standards of indentation and formatting are followed, so that the code and its structure are clearly visible.    Variables are named meaningfully, so that they communicate intent.    Comments, which are present only where needed, are concise and adhere to standard formats.    Guard clauses are used instead of nested if statements.    Facilities of the language are used skillfully, leveraging iteration and recursion rather than copy and paste coding.    Functions are short and to the point, and do one thing.    Indirection is minimized as much as possible, while still maintaining flexibility.    StackoverflowAnother answer, same question on Stackoverflow:  Some things that increase readability:      Use whitespace to separate disparate areas of code. For example, indent code blocks like “if” statements. Leave blank lines between methods/functions or related lines of code within a method/function. This allows the brain to segregate the code even before the characters are read.    Use meaningful variable and method/function/class names. Follow the standard practice for the language and use terms from the problem domain if possible. The meaning and use of something should be evident from its name. Names should also be consistent.    Comment effectively. Avoid obvious comments (“The GetX() method returns the current value of x”). Comments should say what the code intends to do, how it relates to other parts of the code and any assumptions (“Argument “a” cannot be null. The code throws an exception if a is null”).    Following established design patterns for the language, library or problem space. For example, avoid repeating code (called DRY or Don’t Repeat Yourself. This wastes time as the reader tries to look for differences or find the correct piece of code to fix.    Keep it Simple (KISS principle). For example, avoid premature or unnecessary optimization. Optimization has its place but code can often be optimized without impacting readability.    Arguably the single most important aspect is consistency. It is easier to understand code if the reader knows what to expect and where to look. If the project uses conflicting variable naming and commenting styles, for example, the reader has to waste mental effort learning new styles and context switching.A book on the subject:Dustin Boswell, Trevor Foucher: The Art of Readable Code: Simple and Practical Techniques for Writing Better Code. O’Reilly, 2011."
}, 

{
"id": "-qualities-code-complexity",
"title": "Code Complexity",
"author": null,
"tags": ["efficient"],
"url": "/qualities/code-complexity",
"date": "2022-12-28",
"content": "Code complexity refers to the level of intricacy, difficulty, or sophistication in a software program’s source code. It is a measure of how challenging it is to understand, maintain, and modify the codebase. There are various metrics and methodologies used to assess code complexity, each aiming to provide insights into the code’s quality and potential issues.Commonly used metrics to evaluate code complexity include:      Cyclomatic Complexity: It measures the number of linearly independent paths through a program’s source code. Higher cyclomatic complexity indicates increased difficulty in understanding and maintaining the code. Tools like McCabe’s Cyclomatic Complexity can calculate this metric.        Halstead Complexity Measures: Developed by Maurice Halstead, these metrics are based on the number of operators, operands, and unique operators and operands in the code. They help in understanding the program’s volume and difficulty.        Lines of Code (LOC): The number of lines in the source code. Though not a comprehensive measure of complexity, it can give some indication of a program’s size and potential complexity.        Nesting Depth: It measures the depth of nested control structures within the code, which can impact code readability and maintainability.        Number of Dependencies: The number of external dependencies a module or class has. High dependency count can increase code complexity and make the codebase harder to manage.    A quantitative measure [whether there is not more than an adequate] number of linearly independent paths through a program’s source code.It was developed by Thomas J. McCabe, Sr. in 1976.  WikipediaMore precise:  The complexity measure approach we will take is to measure and control the number of paths through a program. […] Given a program we will associate with it a directed graph that has unique entry and exit nodes. Each node in the graph corresponds to a block of code in the program where the flow is sequential and the arcs correspond to branches taken in the program. This graph is classically known as the program control graph and it is assumed that each node can be reached by the entry node and each node can reach the exit node.[…] The cyclomatic number V(G) of a [program control] graph G with n vertices, e edges, and p connected components is  v(G)=e-n+p.  [Mccabe+1976, p. 308]  The overall strategy will be to measure the complexity of a program by computing the number of linearly independent paths v(G), control the “size” of programs by setting an upper limit to v(G) (instead of using just physical size), and use thecyclomatic complexity as the basis for a testing methodology.  [Mccabe+1976, p. 309]"
}, 

{
"id": "-qualities-co-existence",
"title": "Co-existence",
"author": null,
"tags": ["flexible"],
"url": "/qualities/co-existence",
"date": "2022-12-28",
"content": "Definitions:  Capability of a product to perform its required functions efficiently while sharing a common environment and resources with other products, without detrimental impact on any other product.  ISO-25010:2023"
}, 

{
"id": "-qualities-clarity",
"title": "Clarity",
"author": null,
"tags": ["usable", "reliable"],
"url": "/qualities/clarity",
"date": "2022-12-28",
"content": "  The quality of being coherent and intelligible.  Oxford DictionaryFree from ambiguity."
}, 

{
"id": "-qualities-changeability",
"title": "Changeability",
"author": null,
"tags": ["flexible"],
"url": "/qualities/changeability",
"date": "2022-12-28",
"content": "See especially modifiabilitySynonym: Mutability  One common theme popping up in projects is that change is the only constant. Code changes, architecture changes, technology changes, requirements change and people change. But often, change comes at a high cost. Things were just not prepared for change because doing so would have imposed the costs earlier on. But really the same costs? To reduce costs in the long run, wouldn’t it be beneficial to spend some effort in changeability upfront? Of course, but it is difficult to find the sweet spot between spending enough and too much effort to properly implement changeability.  …For aspects shall be distinguished:      Robustness: the system is insensitive to a change in the surrounding environment.    Flexibility: the system can easily be changed.    Agility: the system can rapidly be changed.    Adaptability: the system adapts itself to changing operating conditions.    Fabian Keller: Changeability in Software Architectures"
}, 

{
"id": "-qualities-change-failure-rate",
"title": "Change failure rate",
"author": null,
"tags": ["operable"],
"url": "/qualities/change-failure-rate",
"date": "2022-12-28",
"content": "See also deployabilityBelongs to the key devops metrics.  Change failure rate: the percentage of code changes that require hot fixes or other remediation after production. This does not measure failures caught by testing and fixed before code is deployed.  quoted from Atlassian  High-performing teams have change failure rates in the 0-15 percent range.   The same practices that enable shorter lead times — test automation, trunk-based development, and working in small batches — correlate with a reduction in change failure rates. All these practices make defects much easier to identify and remediate.   quoted from Atlassian"
}, 

{
"id": "-qualities-carbon-emission-efficiency",
"title": "Carbon Emission Efficiency",
"author": null,
"tags": ["efficient"],
"url": "/qualities/carbon-emission-efficiency",
"date": "2022-12-28",
"content": "  … refers to the economic benefits generated by production activities that produce carbon emissions at the same time. The less carbon emissions generated per unit of economic output, the more carbon emission efficient it is.  Scholarly EncyclopediaThe whole article is worth reading.  …shorthand for emissions of seven greenhouse gases (GHGs) covered by the Kyoto Protocol:      carbon dioxide (CO2),    methane (CH4),    nitrous oxide (N2O),    hydrofluorocarbons (HFCs),    perfluorocarbons (PFCs),    sulfur hexafluoride (SF6), and    nitrogen trifluoride (NF3).    It is common practice to express GHGs as a single unit, CO2-equivalents (CO2e), signifying the amount of CO2 that would have the equivalent impact on global warming.  Ecological Economics Vol 175, Sept 2020Also known as Carbon Footprint  carbon footprint: “Measure of the exclusive total amount of emissions of carbon dioxide (CO2 ) that is directly and indirectly caused by an activity or is accumulated over the lifecycle stages of a product.  Wikipedia"
}, 

{
"id": "-qualities-capacity",
"title": "Capacity",
"author": null,
"tags": ["efficient", "reliable"],
"url": "/qualities/capacity",
"date": "2022-12-28",
"content": "Definitions:  System meets requirements for the maximum limits of system parameter.  (modified from)) ISO-25010:2023  Capacity requirements deal with the amount of information or services that can be handled by the component or system.  Science Direct"
}, 

{
"id": "-qualities-budget-constraint",
"title": "Budget constraint",
"author": null,
"tags": ["suitable", "efficient"],
"url": "/qualities/budget-constraint",
"date": "2022-12-28",
"content": "  … the budget for the project, expressed in money or available resources.  Volere+2012, p. 22"
}, 

{
"id": "-qualities-backward-compatibility",
"title": "Backward compatibility",
"author": null,
"tags": ["usable", "operable", "reliable"],
"url": "/qualities/backward-compatibility",
"date": "2022-12-28",
"content": "See Compatibility.Definitions:  Backward compatibility is a property of an operating system, product, or technology that allows for interoperability with an older legacy system, or with input designed for such a system, especially in telecommunications and computing.  Wikipedia"
}, 

{
"id": "-qualities-availability",
"title": "Availability",
"author": null,
"tags": ["reliable", "usable"],
"url": "/qualities/availability",
"date": "2022-12-28",
"content": "  Capability of a product to be accessible and operational when required for use.  ISO-25010:2023  Availability can be assessed by the proportion of total time during which the system, product or component is in an up state. Availability is therefore a combination of faultlessness (which governs the frequency of failure), fault tolerance and recoverability (which governs the length of down time following each failure).  ISO-25010:2023"
}, 

{
"id": "-qualities-autonomy",
"title": "Autonomy",
"author": null,
"tags": ["operable", "suitable"],
"url": "/qualities/autonomy",
"date": "2022-12-28",
"content": "Things that work independently from others.  Autonomy is the ability to make your own decisions about what to do rather than being influenced by someone else or told what to do.  Vocabulary.com"
}, 

{
"id": "-qualities-authenticity",
"title": "Authenticity",
"author": null,
"tags": ["secure"],
"url": "/qualities/authenticity",
"date": "2022-12-28",
"content": "See #secureDefinitions:  Capability of a product to prove that the identity of a subject or resource is the one claimed.  ISO-25010:2023      The property that data originated from its purported source.    The property of being genuine and being able to be verified and trusted; confidence in the validity of a transmission, a message, or message originator.    Computer Security Resource Center"
}, 

{
"id": "-qualities-auditability",
"title": "Auditability",
"author": null,
"tags": ["operable"],
"url": "/qualities/auditability",
"date": "2022-12-28",
"content": "  … what the product has to do (usually retain records) to permit the required audit checks.  Volere+2012, p. 3How easy the product or system allows (usually external) stakeholders to audit/inspect/verify certain features or capabilities.Often times an audit is performed to verify compliance to standards related to product or process features (like SPICE in automotive domain)."
}, 

{
"id": "-qualities-attractiveness",
"title": "Attractiveness",
"author": null,
"tags": ["usable"],
"url": "/qualities/attractiveness",
"date": "2022-12-28",
"content": "  Attractiveness summarizes properties that make software appealing to users and stakeholders. Attractive software typically exhibits:      User-friendly and intuitive design: The software is easy to navigate and use, minimizing learning curves and maximizing efficiency.    Robust functionality and regular updates: The software offers powerful features and is continuously improved to meet evolving user needs.    Optimized performance with minimal errors: The software runs smoothly, with quick load times and few errors, enhancing user productivity.    Compatibility with various systems: The software works well across different platforms and hardware configurations.    BGOSoftware: How to define beautiful software"
}, 

{
"id": "-qualities-appropriateness-recognizability",
"title": "Appropriateness recognizability",
"author": null,
"tags": ["usable", "operable"],
"url": "/qualities/appropriateness-recognizability",
"date": "2022-12-28",
"content": "See also #usable.Definitions:  Capability of a product to be recognized by users as appropriate for their needs.  ISO-25010:2023"
}, 

{
"id": "-qualities-appearance",
"title": "Appearance",
"author": null,
"tags": ["usable"],
"url": "/qualities/appearance",
"date": "2022-12-28",
"content": "Definitions (related to the spirit of the product/system):  Your client may have made particular demands for the product, such as corporate branding, colours to be used, and so on.  Volere+2012, p. 45"
}, 

{
"id": "-qualities-anticipated-workplace-environment",
"title": "Anticipated Workplace Environment",
"author": null,
"tags": ["usable"],
"url": "/qualities/anticipated-workplace-environment",
"date": "2022-12-28",
"content": "Definition:  This describes the workplace in which the users are to work and use the product. It should describe any features of the workplace that could have an effect on the design of the product, and the social and cultural aspects of the workplace.  Volere+2012, p. 20"
}, 

{
"id": "-qualities-analysability",
"title": "Analysability",
"author": null,
"tags": ["flexible"],
"url": "/qualities/analysability",
"date": "2022-12-28",
"content": "  Capability of a product  to be effectively and efficiently assessed regarding the impact of an intended change to one or more of its parts, to diagnose it for deficiencies or causes of failures, or to identify parts to be modified.  Implementation can include providing mechanisms for the product to analyse its own faults and provide reports prior to a failure or other event.  from ISO-25010:2023"
}, 

{
"id": "-qualities-agility",
"title": "Agility",
"author": null,
"tags": ["flexible"],
"url": "/qualities/agility",
"date": "2022-12-28",
"content": "See especially modifiability and changeabilityA system can rapidly be changed (as opposed to flexibility, which means that a system can easily be changed.)"
}, 

{
"id": "-qualities-affordability",
"title": "Affordability",
"author": null,
"tags": ["suitable", "usable", "efficient"],
"url": "/qualities/affordability",
"date": "2022-12-28",
"content": "Definition:  “the state of being cheap enough for people to be able to buy.”  Cambridge dictionaryIn the context of software system quality and software engineering, “affordability” generally refers to the cost-effectiveness of developing, deploying, maintaining, or acquiring a software system. When a software system is described as “affordable,” it means that its total cost — considering both initial costs and ongoing costs — provides good value for the capabilities and benefits it offers.Affordability in software engineering can encompass several aspects:  Development Costs: This includes the expenses associated with the design, development, testing, and deployment of the software. It factors in costs such as developer wages, software tools, infrastructure, training, and other related overheads.  Maintenance Costs: After the initial development, software systems need regular updates, patches, and potentially upgrades. Affordability considers how cost-effective it is to maintain and support the software throughout its lifecycle.  Licensing Costs: If the software uses third-party components or platforms, there may be licensing fees. Affordability takes into account the cumulative cost of these licenses.  Training Costs: An affordable software system should not require excessive training costs for users to become proficient.  Operational Costs: This covers costs related to running the software, including hosting, server maintenance, data storage, and more.  Scalability Costs: As the system grows or needs to support more users or data, there might be costs associated with scaling the system up. An affordable system should scale cost-effectively.(This explanation was created with help from ChatGPT v 4.0)"
}, 

{
"id": "-qualities-adaptability",
"title": "Adaptability",
"author": null,
"tags": ["flexible", "usable"],
"url": "/qualities/adaptability",
"date": "2022-12-28",
"content": "  Capability of a product to be effectively and efficiently adapted for or transferred to different hardware, software or other operational or usage environments      Adaptations include those carried out by specialized support staff, and those carried out by business or operational staff, or end users.*If the product is to be adapted by the end user, adaptability corresponds to suitability for individualization    ISO-25010:2023"
}, 

{
"id": "-qualities-accuracy",
"title": "Accuracy",
"author": null,
"tags": ["reliable", "usable"],
"url": "/qualities/accuracy",
"date": "2022-12-28",
"content": "  The degree of conformity of a measured or calculated value to the true value, typically based on a global reference system.  NIST Glossary  Accuracy and precision are two measures of observational error. Accuracy is how close a given set of measurements (observations or readings) are to their true value, while precision is how close the measurements are to each other.  Wikipedia  Accuracy is a description of only systematic errors, a measure of statistical bias of a given measure of central tendency; low accuracy causes a difference between a result and a true value; ISO calls this trueness.Alternatively, accuracy means the combination of both types of observational error (random and systematic), so high accuracy requires both high precision and high trueness.  Wikipedia"
}, 

{
"id": "-qualities-accountability",
"title": "Accountability",
"author": null,
"tags": ["secure"],
"url": "/qualities/accountability",
"date": "2022-12-28",
"content": "See #secureDefinitions:  Capability of a product to enable actions of an entity to be traced uniquely to the entity  ISO-25010:2023      The security goal that generates the requirement for actions of an entity to be traced uniquely to that entity. This supports non-repudiation, deterrence, fault isolation, intrusion detection and prevention, and after-action recovery and legal action.    A property that ensures that the actions of an entity may be traced uniquely to that entity.    The property of being able to trace activities on a system to individuals who may then be held responsible for their actions.    Computer Security Resource Center"
}, 

{
"id": "-qualities-accessibility",
"title": "Accessibility",
"author": null,
"tags": ["usable"],
"url": "/qualities/accessibility",
"date": "2022-12-28",
"content": "See also #usable.There is a W3C standard on this topicDefinitions:  Capability of a product or system to be usable by people with the widest range of characteristics and capabilities to achieve a specified goal in a specified context of use.  Note: The range of capabilities includes disabilities associated with age.  Derived from ISO-25010-2011  Accessibility is the design of products, devices, services, vehicles, or environments so as to be usable by people with disabilities.  Wikipedia/Accessibility  Accessibility is the concept of whether a product or service can be used by everyone—however they encounter it.  InteractionDesignFoundation"
}, 

{
"id": "-qualities-access-control",
"title": "Access Control",
"author": null,
"tags": ["secure"],
"url": "/qualities/access-control",
"date": "2022-12-28",
"content": "Definition:  … who is authorized to access to the product (both functionality and data), under what circumstances that access is granted, and to which parts of the product access is allowed.  Volere+2012, p. 60"
}, 

{
"id": "-requirements-modular-data-analysis",
"title": "Modular System for Data Analysis",
"author": null,
"tags": ["efficient", "flexible"],
"url": "/requirements/modular-system-for-data-analysis",
"date": "2000-12-12",
"content": "  Background: A modular software application designed for data analysis, consisting of independent modules for data import, processing, visualization, and export.    The system currently handles structured data formats and is used primarily for financial data analysis.  Event: As a new requirement, social media data needs to be analyzed. That data is unstructured and requires natural language processing (NLP) capabilities.  Reaction: The system should allow the integration of a new NLP module without requiring significant changes to existing modules.      Module Compatibility: The new NLP module should seamlessly integrate with the existing data import and visualization modules.    User Configuration: Users should be able to configure the system to include the NLP module in their data analysis workflow.    Metrics:      Integration Time: The time taken from the initiation of integrating the new NLP module to the point where it is fully functional is less than 4 hours.    Component Compatibility Success Rate: The percentage of successful data flows between the new NLP module and existing modules is &gt;= 95% (in other words: 5% of queries concerning the new NLP module are allowed to fail).    User Configuration Time: The time users need to configure the new module into their workflow is less than 30 minutes for an experienced user.    System Stability Post-Integration: The system should not experience more than a 5% increase in error rate or performance degradation after the integration of the NLP module.      "
}, 

{
"id": "-requirements-usable-despite-color-blindness",
"title": "Usable Despite Color Blindness",
"author": null,
"tags": ["usable"],
"url": "/requirements/usable-despite-color-blindness",
"date": "2000-09-11",
"content": "  All parts of the system shall be usable by people suffering color blindnesses:      Deuteranomaly    Protanomaly    Protanopia    Deuteranopia    Tritanomaly    Tritanopia and    complete color blindness  "
}, 

{
"id": "-requirements-compliance-with-UI-styleguide",
"title": "Compliance with UI styleguide",
"author": null,
"tags": ["usable"],
"url": "/requirements/compliance-with-ui-styleguide",
"date": "2000-09-10",
"content": "  Stimulus: The user interface and interactive components of the system are to be redesigned and implemented.  Reaction: A manual audit/inspection by a user-interface specialist is performed and/or automated style tests are in place.  Metric: No deviation from the user interface guidelines are detected.  Background: Operating systems like Windows(tm) or MacOS(tm) have strict human-interaction-guidelines."
}, 

{
"id": "-requirements-expressive-error-messages",
"title": "Expressive error messages",
"author": null,
"tags": ["usable"],
"url": "/requirements/expressive-error-messages",
"date": "2000-09-09",
"content": "  Stimulus: An error / exceptional situation occurs in the technical infrastructure (memory overflow, out-of-memory, hardware error, virtual-machine-issue, container-related-issue).  Reaction: The system detects the error, reports (as far as possible) to the user and shuts down in a controlled manner. The message shall contain specific explanations and instructions on possible reactions.  Metric: Error detection occurs within 15 seconds, message to user (if still possible) within 1 second, shutdown within 15 seconds.  Background: If an error situation occurs, this is displayed to the user in expressive, meaningful messages."
}, 

{
"id": "-requirements-interruptable-backend-process",
"title": "Interruptable backend process",
"author": null,
"tags": ["usable"],
"url": "/requirements/interruptable-backend-process",
"date": "2000-09-08",
"content": "  Stimulus: User has (accidentally) started a report generation, but now wants to interrupt and clicks the abort or cancel button or select the cancel-function via keyboard.  Reaction: The system interrupts the report generation, saves the current generation state (in case user wants to continue later) and returns control to the user interface.  Metric: User gets back full keyboard or mouse control within at most 10 seconds. That means that all backend generation tasks or processes have acknowledged the abort/cancel signal.  Background: The generation of such reports is performed in several parallel threads or processes, eventually on different OS-processes, virtual machines or containers. Cancelling or aborting needs to handle such kind of distributed execution."
}, 

{
"id": "-requirements-detect-inconsistent-user-input",
"title": "Detect inconsistent user input",
"author": null,
"tags": ["usable", "reliable"],
"url": "/requirements/detect-inconsistent-user-input",
"date": "2000-09-07",
"content": "  Stimulus: User manually enters data into the system.  Reaction: User accepts consistent or correct data, and rejects inconsistent or wrong data.  Metric: In case of inconsistent or wrong data, system displays appropriate messages that clearly explains the inconsistency or error.  Background: It needs to be clarified what kind of inconsistencies can be recognized within the domain."
}, 

{
"id": "-requirements-consistent-keyboard-shortcuts",
"title": "Consistent keyboard shortcuts",
"author": null,
"tags": ["usable", "efficient"],
"url": "/requirements/consistent-keyboard-shortcuts",
"date": "2000-09-06",
"content": "  Context/Background      The user can use keyboard shortcuts to select and execute functions within the graphical user interface.    The system must support keyboard-only navigation across all parts of the interface.    Source  Somebody navigates the graphical interface with only a keyboard, without using a mouse or trackpad.  Metric/Acceptance Criteria      The user shall be able to perform all actions with the keyboard alone.    Keyboard shortcuts must be consistent throughout the system: Identical or similar functions, such as “save”, “copy”, and “paste”, shall have identical shortcuts across the entire system.  "
}, 

{
"id": "-requirements-usable-on-latest-browsers",
"title": "User Interface can be used in Current Browsers",
"author": null,
"tags": ["flexible", "usable", "operable"],
"url": "/requirements/user-interface-works-with-current-browsers",
"date": "2000-09-05",
"content": "  Background: The system offers an HTML/web based user interfaces.  The user interface works seamlessly without restrictions in the five latest versions of the major browsers.  This compatibility requirements holds for the following browsers:      Chrome starting from version 107    Edge starting with version 107    Firefox starting from version 107    Safari starting from version 14    Opera starting with version 94  "
}, 

{
"id": "-requirements-usable-with-gloves",
"title": "Usable With Gloves",
"author": null,
"tags": ["usable"],
"url": "/requirements/usable-with-gloves",
"date": "2000-09-04",
"content": "  All interactive functions (the graphical user frontend) of the system must be usable by people wearing gloves.  Background: The graphical frontend plus input media (keyboards and other input devices) are located in a factory, where people are often required to wear gloves due to safety considerations."
}, 

{
"id": "-requirements-usable-on-factory-floor",
"title": "Usable on Factory Floor",
"author": null,
"tags": ["usable"],
"url": "/requirements/usable-on-factory-floor",
"date": "2000-09-04",
"content": "  The system will be used in a noisy, dusty and badly illuminated factory floor."
}, 

{
"id": "-requirements-access-find-function-in-3-secs",
"title": "Access find function in three seconds",
"author": null,
"tags": ["usable"],
"url": "/requirements/access-find-function-quickly",
"date": "2000-09-03",
"content": "  Context/Background  The system is a software application with a graphical user interface, accessible via mobile or desktop platforms.The application includes various functions, with the “find” function being a critical feature for locating specific types of data within the system.  Source  User interaction - A user accesses the find function from the application’s main interface.  Metric/Acceptance Criteria  The “find” function must be accessible to users within 3 seconds of the interface loading.This can be measured by:*. Time from interface load completion to the “find” function becoming interactive and ready for use.*. Success rate: At least 99% of users should be able to access the “find” function within the 3-second timeframe.*. Consistency: This performance metric should be maintained across different devices and network conditions typical for the application’s intended use."
}, 

{
"id": "-requirements-response-time-for-image-rendering",
"title": "Response time for image rendering",
"author": null,
"tags": ["efficient"],
"url": "/requirements/response-time-for-image-rendering",
"date": "2000-09-02",
"content": "  Stimulus: A user selects a graphical filter (like shadow, greyscaling, resizing or similar) and clicks or selects the apply filter function.  Reaction: The system displays the changed image next to the original upon.  Metric: The system displays the changed image in less than a second.  Background: We develop an image manipulation software, offering a variety of image filters for users to select and apply to their images. Such filters include shadows, greyscaling, resizing, background-removal and others.  To achieve the required response time, it’s an option to reduce the resolution of the image for the preview."
}, 

{
"id": "-requirements-near-instant-search-results",
"title": "Near instant search results",
"author": null,
"tags": ["usable", "efficient"],
"url": "/requirements/near-instant-search-results",
"date": "2000-09-02",
"content": "  Stimulus: A user searches for available flights for a given departure and arrival date and location via the graphical user interface.  Metric: The system shows/displays the first result within 500 msec. Additional results might be added later.  Background: Our travel portal forwards such queries to several airlines and booking agencies.Please note: This requirement is tagged both efficient and usable"
}, 

{
"id": "-requirements-easily-understandable-acceptance-test-cases",
"title": "Easily understandable acceptance test cases",
"author": null,
"tags": ["usable", "suitable", "efficient"],
"url": "/requirements/understandable-acceptance-tests",
"date": "2000-09-01",
"content": "  Stimulus: A new tester joins the team, who has no development skills. This person is supposed to test the new business features of the upcoming release.  Reaction: The tester reads the acceptance test documentation and starts to write new automated acceptance tests.  Metric: A tester without development skills can learn the acceptance test concepts in less than one day.  Background: An automated acceptance and integration testing framework helps to verify the correctness of business (or domain) functionality. These tests are written in a domain-specific language."
}, 

{
"id": "-requirements-test-with-path-coverage-in-30min",
"title": "Test with path coverage in 30min",
"author": null,
"tags": ["suitable"],
"url": "/requirements/test-with-path-coverage-30min",
"date": "2000-07-01",
"content": "  Idea: Bass et al., 2021  Stimulus: The developer completes a code unit.  Reaction: The developer then performs a test sequence whose results are captured.  Metric: This test sequence achieves path coverage of 85% within at most 30 minutes."
}, 

{
"id": "-requirements-employee-tries-to-modify-pay-rate",
"title": "Employee attempts to modify pay rate",
"author": null,
"tags": ["secure"],
"url": "/requirements/employee-attempts-to-modify-pay-rate",
"date": "2000-06-06",
"content": "  Stimulus: A disgruntled employee at a remote location improperly attempts to modify the pay rate during normal operation.  Response: The unauthorized access is detected and the system maintains an audit trail.  Measure: The correct data is restored within one day.  Source: Bass et al., 2021"
}, 

{
"id": "-requirements-log-every-data-modification",
"title": "Every data modification is logged",
"author": null,
"tags": ["secure"],
"url": "/requirements/every-data-modification-is-logged",
"date": "2000-06-05",
"content": "  Every data modification (create, update, delete of data) is logged in a data store that cannot be erased or modified by system users."
}, 

{
"id": "-requirements-only-authorized-users-can-access",
"title": "Only authenticated users can access data",
"author": null,
"tags": ["secure"],
"url": "/requirements/only-authenticated-users-can-access",
"date": "2000-06-04",
"content": "  Background: Prior to using the system, users must authenticate themselves, either by using SSO or entering unique credentials (username/password).  After authentication, the system determines this users’ authorization level (which function these users are allowed to use and which data they are allowed to see and/or modify)  Scenario: Users are allowed to use only those system functions and see only the data they are authorized for."
}, 

{
"id": "-requirements-zero-knowledge-data-storage",
"title": "Zero-knowledge data storage",
"author": null,
"tags": ["secure"],
"url": "/requirements/zero-knowledge-data-storage",
"date": "2000-06-03",
"content": "  Background: The system offers storage capacity for user-files, similar to services like Dropbox or OneDrive.  Scenario: The system has zero knowledge of the content of user files. This means that neither the system nor its admins own the encryption keys of user files and therefore can’t access them.  It implies that if a user loses the encryption key, data cannot be recovered."
}, 

{
"id": "-requirements-encrypted-storage",
"title": "Encrypted storage",
"author": null,
"tags": ["secure"],
"url": "/requirements/encrypted-storage",
"date": "2000-06-02",
"content": "  Data-at-rest (specifically data in databases and in backups) shall be encrypted using state-of-the-art encryption algorithms from a proven vendor or open-source project - such as AES-256 at the time of writing."
}, 

{
"id": "-requirements-need-to-know-principle",
"title": "Confidentiality by multi-tenancy",
"author": null,
"tags": ["secure"],
"url": "/requirements/confidentiality-by-multitenance",
"date": "2000-06-01",
"content": "  The system shall be designed to be multi-tenant.  Users of one tenant must never be able to access data specific to another tenant."
}, 

{
"id": "-requirements-life-critical-sensor-failure",
"title": "Backup patient monitoring sensor takes over",
"author": null,
"tags": ["safe"],
"url": "/requirements/backup-patient-monitoring-sensor",
"date": "2000-05-01",
"content": "  Idea: Bass et al., 2021  Context: The system monitors patients several health and vitality parameters (e.g. heartbeat frequency and amplitude, blood flow in coronary artery etc)  Stimulus: A sensor in the patient monitoring system fails to report a life-critical value after 100 ms.  Reaction: The failure is logged, a warning light is illuminated on the console, and a backup (lower-fidelity) sensor is engaged.  Metric: The system monitors the patient using the backup sensor after no more than 300 ms."
}, 

{
"id": "-requirements-grace-shutdown",
"title": "Severe errors are detected and the system shuts down into safe state",
"author": null,
"tags": ["operable", "safe", "reliable"],
"url": "/requirements/shutdown-to-safe-state",
"date": "2000-04-06",
"content": "  Severe errors shall be detected.  In such cases, the system shuts down gracefully into a safe state."
}, 

{
"id": "-requirements-server-fails-no-downtime",
"title": "Server fails, system continues to operate without downtime",
"author": null,
"tags": ["reliable"],
"url": "/requirements/server-fails-operation-without-downtime",
"date": "2000-04-05",
"content": "      A server in a server farm fails during normal operation, and the system informs the operator and continues to operate with no downtime.    Len Bass et al., 2021, p. 76  "
}, 

{
"id": "-requirements-no-reboot-of-os-necessary",
"title": "System can run >12h without re-booting the operating system",
"author": null,
"tags": ["operable", "reliable"],
"url": "/requirements/long-running-without-reboot",
"date": "2000-04-04",
"content": "  Even when the system runs for &gt;12 hours, the operating system does not need to be re-booted."
}, 

{
"id": "-requirements-mttr-12h",
"title": "Restored to fully functional state 12h after complete failure",
"author": null,
"tags": ["operable", "usable", "reliable"],
"url": "/requirements/mttr-12h",
"date": "2000-04-03",
"content": "  After a complete failure of the complete system (or major parts), the system is restored to a fully functional state in at most 12h.This includes restoring data that might have been corrupted due to the failure."
}, 

{
"id": "-requirements-reliable-7-24-99",
"title": "Available 7x24 with 99% uptime",
"author": null,
"tags": ["operable", "usable", "reliable"],
"url": "/requirements/available-7-24-99",
"date": "2000-04-02",
"content": "  Background:      The system serves hundreds to thousands of concurrent users worldwide.    The “main parts” consists of the login and landing page, plus the major 3 use-cases.    Metric: The main parts of the user interface are available 7x24h with 99% of uptime."
}, 

{
"id": "-requirements-precise-gamma-calculation",
"title": "Precise calculation of gamma coefficient",
"author": null,
"tags": ["reliable"],
"url": "/requirements/high-precision-calculation",
"date": "2000-04-01",
"content": "  Scenario: The preciseness of the gamma-coefficient calculation is four digits after the decimal point.  Background: The (hypothetical) Gamma coefficient is an important variable for calculating energy efficiency of the machines we produce.Standard mathematical libraries do not support this coefficient,  Our system calculates this Gamma coefficient, based upon complex mathematical algorithms."
}, 

{
"id": "-requirements-quick-unit-tests",
"title": "Quick unit tests",
"author": null,
"tags": ["operable"],
"url": "/requirements/quick-unit-tests",
"date": "2000-03-03",
"content": "  It takes less than 180 seconds to run all automated unit-tests for a subsystem or component."
}, 

{
"id": "-requirements-low-effort-deployment",
"title": "Low effort deployment",
"author": null,
"tags": ["operable"],
"url": "/requirements/low-effort-deployment",
"date": "2000-03-02",
"content": "  Stimulus: A new release of an authentication/authorization service (which our product uses) is made available in the component marketplace, and the product owner decides to incorporate this version into the release.  Response: The new service is tested and deployed to the production environment.  Measure: It takes less than 40 hours of elapsed time and no more than 120 person-hours of effort. The deployment introduces no defects and no SLA is violated.  Idea: &gt;Bass et al., 2021"
}, 

{
"id": "-requirements-interop-with-specific-Java",
"title": "Interoperable with Java 12",
"author": null,
"tags": ["operable"],
"url": "/requirements/interoperable-with-java-12",
"date": "2000-03-01",
"content": "  Background: The system has been implemented on the Java(tm) virtual machine.  The system shall work on Java virtual machines supporting Java-12 and later versions."
}, 

{
"id": "-requirements-compatible-with-5-battery-providers",
"title": "Compatible with 5 different battery providers",
"author": null,
"tags": ["flexible"],
"url": "/requirements/compatible-with-5-battery-providers",
"date": "2000-02-06",
"content": "  Context/Background      The system’s energy is supplied by a rechargeable onboard battery provided by an external supplier that is mechanically attached to a circuit board.    The current version of that board fits only batteries of ONE specific supplier.    Source  Product management has decided to reduce dependency of this specific supplier and to modify the circuit board.  Metric/Acceptance Criteria      The circuit board (thus the system) shall be compatible with battery models from the five preferred battery suppliers.    The system shall successfully operate with battery models from all these five suppliers without requiring any hardware modifications.    The system shall pass functional tests with each battery model under standard operating conditions.    The system’s performance, especially battery life, shall vary by less than 10% across the different battery models.  "
}, 

{
"id": "-requirements-localizable-to-n-languages",
"title": "Localizable to several languages",
"author": null,
"tags": ["flexible"],
"url": "/requirements/localizable-to-n-languages",
"date": "2000-02-05",
"content": "  Background: The systems’ graphical user interface currently supports only English (EN) locale.  The system shall be localizable to several other languages, eventually to languages requiring different fonts or writing directions (like left-to-right or top-to-bottom).  The concrete list of target languages is currently not available."
}, 

{
"id": "-requirements-easily-change-cloud-provider",
"title": "Easily change cloud provider",
"author": null,
"tags": ["flexible"],
"url": "/requirements/change-cloud-provider",
"date": "2000-02-04",
"content": "  Stimulus: Management or other important stakeholders decide to change the cloud provider.  Metric: Moving our application to another cloud provider shall need at most 15 person days of development and administration effort.  Background: We are operating our system in a public cloud.  Remark: We do not count account creation, contract negotiation and the initial feasibility study towards these 15 days."
}, 

{
"id": "-requirements-core-functions-mac-win-linux",
"title": "Core functions can be used on multiple OSs",
"author": null,
"tags": ["flexible", "usable", "operable"],
"url": "/requirements/core-functions-on-mac-win-linux",
"date": "2000-02-03",
"content": "  Context/Background      The system offers a few complicated core business functions.    The system is available on different operating systems, especially macOS, Windows and a few major Linux distributions.    Source      A new release of one of the supported operating (OS) systems becomes available.    Metric/Acceptance Criteria            The new release of the OS does not affect the ability to work on this platform,  at least in comparable execution environments (concerning cpu and memory capacity).              Core functions can be re-used on macOS, Windows and Linux applications without changes to their source code.      "
}, 

{
"id": "-requirements-independent-enhancement-of-subsystem",
"title": "Independent enhancement of subsystem",
"author": null,
"tags": ["efficient", "flexible"],
"url": "/requirements/independent-enhancement-of-subsystem",
"date": "2000-02-02",
"content": "  Background: Extensions or changes to a subsystem should be possible independently of all other subsystems.  Source: Development team  Stimulus: Changes code or configuration within a subsystem or component  Reaction: No other subsystem needs to be changed  Metric: The following applies to all other subsystems:      The source code remains identical    Compile, build and test processes remain identical    Deployment, installation and configuration remain identical  "
}, 

{
"id": "-requirements-portable-data-checker",
"title": "Portable Business Data Checker",
"author": null,
"tags": ["flexible", "operable"],
"url": "/requirements/portable-business-data-checker",
"date": "2000-02-01",
"content": "  Scenario: The BuDIC tool needs to be compatible with the latest versions of MySQL, PostgreSQL, Oracle and DB2.If an update or new version of one of these databases is released by the respective vendor, BuDIC can be updated to be compliant with the new version within 2 person-days of development and test effort.  Background: Business data is stored in different databases (MySQL, PostgreSQL, Oracle, DB2).Integrity and consistency of certain data types need to be checked across these databases.An integrity checking tool (BuDIC) has been developed, that is able to access several datas ources in parallel."
}, 

{
"id": "-requirements-sensor-inputs-per-minute",
"title": "Capacity to process 1000 sensor inputs per minute",
"author": null,
"tags": ["efficient"],
"url": "/requirements/capacity-to-process-sensor-inputs",
"date": "2000-01-18",
"content": "  The system must be able to record, process and store 1000 sensor inputs per minute."
}, 

{
"id": "-requirements-required-capacity",
"title": "Respond to 15000 requests per workday",
"author": null,
"tags": ["efficient"],
"url": "/requirements/respond-to-15000-requests-per-workday",
"date": "2000-01-17",
"content": "  The system must be able to respond to 15000 requests per workday (8 hours)."
}, 

{
"id": "-requirements-restricted-memory",
"title": "Restricted Memory",
"author": null,
"tags": ["efficient"],
"url": "/requirements/restricted-memory",
"date": "2000-01-16",
"content": "  Total (random-access) memory consumption must not exceed 512 MByte."
}, 

{
"id": "-requirements-low-impact-diagnosis",
"title": "Low impact diagnosis",
"author": null,
"tags": ["efficient"],
"url": "/requirements/low-impact-diagnosis",
"date": "2000-01-15",
"content": "  Stimulus: A tester needs a large set of test data for system xyz.  Reaction: A specific generator creates 1GByte of test data for system xyz.  Metric: The data is created in less than 60 minutes  Background: Diagnosis has little effect on execution timeThe diagnostics subsystem has only a minor impact on the execution time of system functions and transactions"
}, 

{
"id": "-requirements-efficient-generation-of-test-data",
"title": "Efficient generation of test data",
"author": null,
"tags": ["efficient", "suitable"],
"url": "/requirements/efficient-generation-of-test-data",
"date": "2000-01-14",
"content": "  Stimulus: A tester needs a large set of test data for system xyz.  Reaction: A specific generator creates 1GByte of test data for system xyz.  Metric: The data is created in less than 60 minutes  Background: The complex database structure of system xyz contains a few dozens of tables with around 100 columns and several dozens of (foreign-key) relationships/dependencies between these tables.  Data from production must only be used when heavily anonymized."
}, 

{
"id": "-requirements-fast-creation-of-report",
"title": "Fast creation of sales report",
"author": null,
"tags": ["efficient"],
"url": "/requirements/fast-creation-of-sales-report",
"date": "2000-01-13",
"content": "  Stimulus: An authenticated user requests generation of the daily sales report in PDF format via the graphical user interface.  Metric: The system generates this report in less than 10 seconds.  Background: Our warehouse conducts hundreds of thousands of sales per day."
}, 

{
"id": "-requirements-fast-rollout-of-changes",
"title": "Fast rollout of changes",
"author": null,
"tags": ["efficient", "operable"],
"url": "/requirements/fast-rollout-of-changes",
"date": "2000-01-10",
"content": "  Background: More than 1000 devices running our system are distributed in the field in customer sites on various locations.  Stimulus: The operating system we use gets a security update which needs to be rolled out to every one of these devices  Reaction: An OS update or patch is created.  Metric: It takes less than 4 weeks to distribute and install this update or patch on all of these devices."
}, 

{
"id": "-requirements-quickly-locate-bugs",
"title": "Quickly locate bugs",
"author": null,
"tags": ["efficient"],
"url": "/requirements/quickly-locate-bugs",
"date": "2000-01-08",
"content": "  Stimulus: Developers, testers or the build system execute automatic test cases (unit or integration tests).  Reaction:  In that process, a test fails.  Metric: Based upon the error and/or log messages, a developer can locate the cause of the error in less than 10 minutes on average"
}, 

{
"id": "-requirements-understandble-generated-code",
"title": "Easily understandable generated code",
"author": null,
"tags": ["efficient", "usable", "suitable"],
"url": "/requirements/understandable-generated-code",
"date": "2000-01-07",
"content": "  Stimulus: A developer has created a new test case in xml.  Reaction: The code generator creates a source code file.  Metric: A human tester can understand the generated test and enhance it with additional tests or test-data within max 30 minutes.  Background: Test cases for a system are described in a (semi-)formal xml-based language and automatically converted into Java, Kotlin or Groovy source code. This code is later adjusted or enhanced by developers or testers."
}, 

{
"id": "-requirements-new-checking-strategy",
"title": "Maintainable checking strategies",
"author": null,
"tags": ["efficient"],
"url": "/requirements/maintainable-checking-strategy",
"date": "2000-01-06",
"content": "  Stimulus: A user needs a specific kind of check currently not available in HtmlSC  Reaction: The new checking algorithm is implemented and integrated in (a fork of) HtmlSC.  Metrics:      The integration of the new check into HtmlSC takes less than 15 min for a developer knowledgeable in HtmlSC    Purely structural checks (like checking the availability of referenced external URLs) shall be implemented in less than 1person-day of effort    The effort and duration for implementing such checks in general cannot be constrained in advance. For example, checks needing artificial intelligence algorithms might need significant time to be implemented and tested.    Background: HTMLSanityChecker (short: HtmlSC) is an open-source checker for HTML files.It can check multiple types of problems, but sometimes users need specific additional checks (like grammar, use of certain vocabulary, use of certain stylesheets etc)  Such changes are usually not integrated in the main branch, but will remain in user-specific forks."
}, 

{
"id": "-requirements-report-yearly-tax-update",
"title": "Efficient update of annual accounting report",
"author": null,
"tags": ["efficient", "flexible"],
"url": "/requirements/annual-tax-update",
"date": "2000-01-05",
"content": "  Stimulus: Updated specification of the data output format for booking reports becomes available, usually October 31st.  Reaction: The source code of the reporting components is updated. The system creates the report according to the new specification.  Metric: The change can be implemented in less than 80 person hours.  Background: The data output format of the annual accounting report is adjusted every year on December 31 to comply with the legal and tax changes. The system must be able to generate the new format."
}, 

{
"id": "-requirements-efficient-precise-sensor",
"title": "Fast and accurate sensor",
"author": null,
"tags": ["efficient", "reliable"],
"url": "/requirements/fast-accurate-sensor",
"date": "2000-01-04",
"content": "  The temperature sensor measures the temperature of the floating liquid at least 5 times per second, with a precision of +/- 0.2 degrees Celsius."
}, 

{
"id": "-requirements-query-execution-measurement",
"title": "Low-overhead query execution measurement",
"author": null,
"tags": ["efficient"],
"url": "/requirements/query-execution-management",
"date": "2000-01-03",
"content": "      Query diagnosis must not add more than 1% or 2msec runtime overhead to the queries, whichever is larger. For example:              a query which takes 200msec to complete must not take more than 202msec with diagnosis,        a 100msec query not more than 102msec.              Query diagnosis must not add more than 1MB memory footprint to system execution.    Background: We execute a large number of CPU- and memory-intensive database queries within our system. A diagnostic component can measure the execution time of these queries, if query-diagnosis configuration is turned on."
}, 

{
"id": "-requirements-efficient-change-business-rules",
"title": "Efficient change of business rules",
"author": null,
"tags": ["flexible", "efficient"],
"url": "/requirements/luggage-routing",
"date": "2000-01-02",
"content": "  Scenario: Luggage routing at the airport shall reflect the official government travel warnings at the latest 4 hours after their publication.  Background: Customs inspections depend on the origin, destination and stopovers of the trip, as well as official government travel warnings concerning these locations."
}, 

{
"id": "-requirements-avoid-common-vulnerabilities",
"title": "Avoid common vulnerabilities",
"author": null,
"tags": ["reliable", "secure"],
"url": "/requirements/avoid-common-vulnerabilities",
"date": "2000-01-01",
"content": "  The system shall avoid the following vulnerabilities in every release/deployment:      Missing data encryption.    OS command injection.    SQL injection.    Buffer overflow.    Missing authentication for critical function.    Missing authorization.    Unrestricted upload of dangerous file types.    Reliance on untrusted inputs in a security decision.  "
}, 

{
"id": "-requirements-new-features-no-new-bugs",
"title": "New Features Introduce No Bugs",
"author": null,
"tags": ["reliable"],
"url": "/requirements/new-features-introduct-no-bugs",
"date": "2000-01-01",
"content": "  Background: New features are added constantly to the system by the development team.  Stimulus: The development team adds a new feature to the system.  On average, adding a new feature introduces 1.5 new bugs to the system during the first 10 days of operation."
}

]
